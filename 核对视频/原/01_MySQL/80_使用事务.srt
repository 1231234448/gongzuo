1
00:00:00,000 --> 00:00:01,018
< No Speech >

2
00:00:01,018 --> 00:00:06,174
上节课我们讲解了什么是事物,那么这节课我们就来使用事物

3
00:00:06,810 --> 00:00:12,286
那么事物的使用呢,它所用的语言其实就是我们之前说的

4
00:00:12,986 --> 00:00:33,278
这个SACO语言当中所提到的一个叫TCL语言的,是吧,TCL语句啊,指的是事物控制语言,Transaction Control Language啊,那么TCL语言当中呢,常用的这个语句有三个,分别是Start Transaction,然后Commit跟Rollback,Start Transaction呢,指的是开启一个事物,

5
00:00:33,818 --> 00:00:37,258
然后,commit指的是提交,rollback指的是回滚

6
00:00:37,258 --> 00:00:39,618
一个是提交,一个是撤回

7
00:00:39,618 --> 00:00:42,978
这是三个用的比较多的语句

8
00:00:42,978 --> 00:00:44,458
好,我们来看一下

9
00:00:44,458 --> 00:00:46,258
首先我们看一下示例一

10
00:00:46,258 --> 00:00:49,138
示例一要求我们创建一个account账户表

11
00:00:49,138 --> 00:00:51,778
包含ID、卡号、用户名和余额

12
00:00:51,778 --> 00:00:54,858
也就是说我们要用银行转账的业务

13
00:00:54,858 --> 00:00:57,662
来实现一下事务控制,看看它的一个特点

14
00:00:58,234 --> 00:01:00,994
那么这个创建表的语句我们来看一下

15
00:01:00,994 --> 00:01:02,954
Create table这是一个DDR语句是吧

16
00:01:02,954 --> 00:01:04,606
然后这个表名叫Account

17
00:01:05,306 --> 00:01:10,906
然后有ID属性,ID列,然后int类型,primary key是这个

18
00:01:10,906 --> 00:01:13,906
组件约束,然后out to increment自动增长

19
00:01:13,906 --> 00:01:17,906
然后有个cart number,NUM,卡号,WATCHER类型

20
00:01:17,906 --> 00:01:22,906
然后这个卡号为什么用WATCHER类型呢?因为卡号我们原来会比较长对吧

21
00:01:22,906 --> 00:01:25,906
所以说用WATCHER它支持的长度会更多一些

22
00:01:25,906 --> 00:01:29,086
然后UserName,WATCHER类型,然后BalanceUser

23
00:01:29,086 --> 00:01:30,906
< No Speech >

24
00:01:30,906 --> 00:01:33,118
好我们把这个表先创建出来

25
00:01:33,118 --> 00:01:36,890
< No Speech >

26
00:01:36,890 --> 00:01:39,102
OK 是吧 我们看一下这个表

27
00:01:39,102 --> 00:01:41,562
< No Speech >

28
00:01:41,562 --> 00:01:46,042
北京商堂这个库,然后刷新,看着表出来了,对不对?OK

29
00:01:46,042 --> 00:01:48,794
< No Speech >

30
00:01:48,794 --> 00:01:51,594
像Account的表当中添加两条数据啊

31
00:01:51,594 --> 00:01:54,894
分别是这个卡号123456789

32
00:01:54,894 --> 00:01:55,794
名字叫张三

33
00:01:55,794 --> 00:01:57,094
余额是2000啊

34
00:01:57,094 --> 00:01:59,194
另外一个呢是98765是321

35
00:01:59,194 --> 00:02:00,894
然后呢名字叫李四

36
00:02:00,894 --> 00:02:01,994
账户也是2000

37
00:02:01,994 --> 00:02:04,574
好我们把这两个数据添加到卡号里面

38
00:02:04,574 --> 00:02:09,914
< No Speech >

39
00:02:09,914 --> 00:02:10,914
运行

40
00:02:10,914 --> 00:02:11,914
OK

41
00:02:11,914 --> 00:02:13,914
然后我们写一个查询

42
00:02:13,914 --> 00:02:14,558
啊

43
00:02:14,558 --> 00:02:20,602
< No Speech >

44
00:02:20,602 --> 00:02:22,814
打字幕君也辛苦了。

45
00:02:23,802 --> 00:02:25,278
Ounty是吧

46
00:02:25,278 --> 00:02:27,898
< No Speech >

47
00:02:27,898 --> 00:02:30,898
看到了吗?这两个数据已经插入进来了

48
00:02:30,898 --> 00:02:32,762
< No Speech >

49
00:02:32,762 --> 00:02:34,762
好,我们再看一下实例三

50
00:02:34,762 --> 00:02:39,762
实例三呢,要求在一个事物当中完成转账业务

51
00:02:39,762 --> 00:02:41,342
这里同学们注意啊

52
00:02:42,170 --> 00:02:44,730
我刚刚是不是执行了两个insert

53
00:02:44,730 --> 00:02:45,690
对吧

54
00:02:45,690 --> 00:02:49,090
那么这个数据我们可以看到已经添加到表当中了

55
00:02:49,090 --> 00:02:52,050
insert语句是不是一个DML操作

56
00:02:52,050 --> 00:02:52,810
是的

57
00:02:52,810 --> 00:02:54,450
那也就是说

58
00:02:54,450 --> 00:02:57,650
我这两个insert现在没有受事物控制吗

59
00:02:57,650 --> 00:02:59,650
直接就插入到数据库当中了吗

60
00:02:59,650 --> 00:03:01,130
这点我们要知道

61
00:03:01,130 --> 00:03:02,770
在MySQL当中

62
00:03:02,770 --> 00:03:07,050
它对于DML操作的默认的事物是自动提交的

63
00:03:07,050 --> 00:03:08,130
也就是说

64
00:03:08,130 --> 00:03:11,130
当你去执行一个insert update delete

65
00:03:11,130 --> 00:03:14,050
并没有在一个事物的范围内去控制

66
00:03:14,050 --> 00:03:15,570
也就是说没有开启一个事物的话

67
00:03:15,570 --> 00:03:17,530
它默认的都是提交的

68
00:03:17,530 --> 00:03:19,530
都是默认自动commit的

69
00:03:19,530 --> 00:03:21,410
那一旦被commit了说明什么

70
00:03:21,410 --> 00:03:23,050
你看我把这个关了

71
00:03:23,050 --> 00:03:24,810
我再去双击它

72
00:03:24,810 --> 00:03:27,330
说明我们数据已经被更新到表当中了

73
00:03:27,330 --> 00:03:29,170
被持久化处理了

74
00:03:29,170 --> 00:03:31,130
能明白同学们

75
00:03:31,130 --> 00:03:32,798
那么如果现在

76
00:03:33,434 --> 00:03:35,486
我不想让它自动提交

77
00:03:36,186 --> 00:03:45,946
我的事务当中对于工作单元的对于数据户在这个工作单元当中对于数据户的操作的行为成功还是失败

78
00:03:45,946 --> 00:03:47,626
我要手动的来控制

79
00:03:47,626 --> 00:03:49,346
如果都成功了没问题

80
00:03:49,346 --> 00:03:50,146
我在commit

81
00:03:50,146 --> 00:03:50,746
如果有问题

82
00:03:50,746 --> 00:03:51,326
我去回复

83
00:03:51,326 --> 00:03:52,346
< No Speech >

84
00:03:52,346 --> 00:03:56,746
那这是不是得先关闭MySQL对于DML操作的自动提交

85
00:03:56,746 --> 00:03:59,546
我说了它是自动提交的,自动事物提交的

86
00:03:59,546 --> 00:04:01,866
那么怎么去关闭它的自动提交呢?

87
00:04:01,866 --> 00:04:04,414
你把你要去手动提交的,你把它关闭掉

88
00:04:04,414 --> 00:04:06,010
< No Speech >

89
00:04:06,010 --> 00:04:08,330
放到一个事物当中就可以了

90
00:04:08,330 --> 00:04:10,410
那么怎么把它放到一个事物当中呢

91
00:04:10,410 --> 00:04:11,806
你先开启一个事物

92
00:04:11,806 --> 00:04:14,298
< No Speech >

93
00:04:14,298 --> 00:04:15,498
Transaction

94
00:04:15,498 --> 00:04:19,514
< No Speech >

95
00:04:19,514 --> 00:04:22,074
这就开启了一个失误,后面不要加分号

96
00:04:22,074 --> 00:04:25,534
从这个start transaction下面所有的

97
00:04:26,234 --> 00:04:29,034
DML操作语句都不会自动提交

98
00:04:29,034 --> 00:04:30,834
都得需要你去手动提交

99
00:04:30,834 --> 00:04:32,542
是这样的吗?我们来试一下

100
00:04:32,542 --> 00:04:34,106
< No Speech >

101
00:04:34,106 --> 00:04:36,734
我现在在start transaction这个

102
00:04:36,734 --> 00:04:39,226
< No Speech >

103
00:04:39,226 --> 00:04:41,086
比如说我们再去查我两条数据

104
00:04:41,086 --> 00:04:44,954
< No Speech >

105
00:04:44,954 --> 00:04:49,598
放到这里啊,然后呢我改一下,比如说这个账户ID叫1,这个账户ID是9

106
00:04:50,138 --> 00:04:55,138
然后这个叫张,这个叫李,钱呢这个是一千,这个是两千

107
00:04:55,138 --> 00:04:59,134
是吧,然后你看我把这个两个语句是不是放到了斯大全赛克逊当中了

108
00:04:59,134 --> 00:05:00,346
< No Speech >

109
00:05:00,346 --> 00:05:03,774
这样我一个一个的去运行啊先运行start transaction

110
00:05:03,774 --> 00:05:05,466
< No Speech >

111
00:05:05,466 --> 00:05:06,986
已经开启了一个失误对吧

112
00:05:06,986 --> 00:05:08,346
然后在这里我先去insert

113
00:05:09,338 --> 00:05:11,038
OK然后我再去insert

114
00:05:11,038 --> 00:05:13,402
< No Speech >

115
00:05:13,402 --> 00:05:15,642
这两个数据已经插入到我们的

116
00:05:15,642 --> 00:05:17,002
account的表当中了

117
00:05:17,002 --> 00:05:17,442
对吧

118
00:05:17,442 --> 00:05:19,042
到底有没有真的插入进来

119
00:05:19,042 --> 00:05:19,682
我们查一下

120
00:05:19,682 --> 00:05:21,214
是哪个的信

121
00:05:21,214 --> 00:05:32,890
< No Speech >

122
00:05:32,890 --> 00:05:34,366
这不数据插入进来了吗

123
00:05:34,874 --> 00:05:38,074
那说明他事物仍然是自动提交的

124
00:05:38,074 --> 00:05:39,274
这就出现问题了

125
00:05:39,274 --> 00:05:41,754
老师你不是说把它放到一个事物当中

126
00:05:41,754 --> 00:05:43,994
这个语句它是手动提交的吗

127
00:05:43,994 --> 00:05:45,554
那怎么会还在表当中呢

128
00:05:45,554 --> 00:05:46,594
哎 主席同学们

129
00:05:46,594 --> 00:05:48,034
这只是一个假象

130
00:05:48,034 --> 00:05:49,154
这只是一个假象

131
00:05:49,154 --> 00:05:50,366
你看 我把它关掉

132
00:05:50,366 --> 00:05:52,122
< No Speech >

133
00:05:52,122 --> 00:05:54,522
我把数据库关闭

134
00:05:54,562 --> 00:05:55,722
然后我再打开

135
00:05:55,762 --> 00:05:57,002
它是缓存数据了

136
00:05:57,002 --> 00:05:58,142
刚才我再打开

137
00:05:58,142 --> 00:05:59,194
< No Speech >

138
00:05:59,194 --> 00:06:00,734
看到了吗同学们 有没有

139
00:06:00,734 --> 00:06:02,906
< No Speech >

140
00:06:02,906 --> 00:06:07,466
cardid1的cardid9的章跟里 是不是数据没有进来

141
00:06:08,058 --> 00:06:15,618
而是只有之前的张钱李氏,因为张钱这两条是通过这个并没有把它放到一个事物当中让它自动提交了

142
00:06:15,618 --> 00:06:18,498
默认的是自动提交嘛,所以我们才看到这个数据的

143
00:06:18,498 --> 00:06:22,418
但是当我们又执行了两个DML语句把它放到了一个事物当中

144
00:06:22,418 --> 00:06:28,458
并且我们没有手动提交,你会发现这个数据并不会真正的插到我们的数据库表当中

145
00:06:28,458 --> 00:06:31,166
也就是说它没有做持久化的操作

146
00:06:31,166 --> 00:06:32,378
< No Speech >

147
00:06:32,378 --> 00:06:33,658
这就是事物的特点

148
00:06:33,658 --> 00:06:35,422
那怎么让它做持久化的操作呢?

149
00:06:35,422 --> 00:06:37,274
< No Speech >

150
00:06:37,274 --> 00:06:38,654
Cormita来确认了

151
00:06:39,482 --> 00:06:45,054
或者roback 因为你要没有提交把它关掉了 那就自动的roback 那没提交就不回滚了

152
00:06:45,054 --> 00:06:46,330
< No Speech >

153
00:06:46,330 --> 00:06:52,010
对吧同学们 这就是事物的一个特点 我们再看 沿着这个例子再往下看

154
00:06:52,010 --> 00:06:57,090
现在我要完成一个转账的业务 肯定要把它放到一个事物当中了 是吧

155
00:06:57,090 --> 00:07:04,318
是start transaction 然后两个update语句 我们不写查询了 直接就关注转账业务当中的两个更新语句

156
00:07:05,082 --> 00:07:10,402
比如说我现在123456789用这个账户给987654321转200块钱

157
00:07:10,402 --> 00:07:13,758
那是不是先去对123456789这个账户做账呢?

158
00:07:13,758 --> 00:07:15,578
< No Speech >

159
00:07:15,578 --> 00:07:18,618
当然前提条件它的余额已经是大于等于200了

160
00:07:18,618 --> 00:07:19,806
上面的判断都结束了

161
00:07:19,806 --> 00:07:21,722
< No Speech >

162
00:07:21,722 --> 00:07:25,162
然后再给987654321这个帐户再加200

163
00:07:25,162 --> 00:07:27,162
那么这两个update的语句

164
00:07:27,162 --> 00:07:29,950
我们是不是要保证它的一个事物完整性啊

165
00:07:30,682 --> 00:07:31,962
什么叫事物完整性

166
00:07:31,962 --> 00:07:32,722
要么都成功

167
00:07:32,722 --> 00:07:33,470
要么都失败

168
00:07:34,074 --> 00:07:36,382
不允许一个成功一个失败的现象出现

169
00:07:36,382 --> 00:07:40,442
< No Speech >

170
00:07:40,442 --> 00:07:44,182
我把这个先拷过来 因为这个没有什么太复杂的东西

171
00:07:44,182 --> 00:07:47,682
就是一个start 出来是x 然后两个update语句 对吧

172
00:07:47,682 --> 00:07:49,758
然后我们去执行一下 先执行它

173
00:07:49,758 --> 00:07:50,938
< No Speech >

174
00:07:50,938 --> 00:07:52,670
然后第一个update

175
00:07:52,670 --> 00:07:58,010
< No Speech >

176
00:07:58,010 --> 00:08:01,278
那我再问大家,现在这个数据真的是减了吗?

177
00:08:01,914 --> 00:08:02,834
肯定不是啊

178
00:08:02,834 --> 00:08:05,954
因为你已经把他们放到了一个事物当中了

179
00:08:05,954 --> 00:08:08,674
然后在事物当中你没有去最终的确认

180
00:08:08,674 --> 00:08:10,078
你没有commit

181
00:08:10,078 --> 00:08:11,482
< No Speech >

182
00:08:11,482 --> 00:08:13,374
那还是那句话我把它一关掉

183
00:08:13,374 --> 00:08:17,018
< No Speech >

184
00:08:17,018 --> 00:08:23,614
然后你再打开数据库,再看表,再看这,没变的,余额都是2000的,还都是2000的

185
00:08:24,410 --> 00:08:28,770
你们有什么东西吗那么如果现在我把这个语句拿过来

186
00:08:28,770 --> 00:08:31,642
< No Speech >

187
00:08:31,642 --> 00:08:34,622
我把这个语句拿过来啊,还是一个一个去执行

188
00:08:34,622 --> 00:08:35,706
< No Speech >

189
00:08:35,706 --> 00:08:40,826
然后再执行它,然后再执行它,然后查询余额已经变了

190
00:08:40,826 --> 00:08:43,306
但是我们知道这是并没有真正的变是吧

191
00:08:43,306 --> 00:08:45,426
那么现在如果想让它真正的变

192
00:08:45,426 --> 00:08:46,826
也就是说现在我要确认事故了

193
00:08:46,826 --> 00:08:47,426
没有问题

194
00:08:47,426 --> 00:08:52,026
这个123456789这个账户给987654321这个账户转型

195
00:08:52,026 --> 00:08:52,906
已经一点问题都没有了

196
00:08:52,906 --> 00:08:53,886
两个执行都成功了

197
00:08:53,886 --> 00:08:57,146
< No Speech >

198
00:08:57,146 --> 00:08:58,910
Carmine是确认是提交

199
00:08:58,910 --> 00:09:01,498
< No Speech >

200
00:09:01,498 --> 00:09:03,178
看到了吗同学们,提交了吧

201
00:09:03,178 --> 00:09:05,854
提交完之后我们把它再关掉

202
00:09:06,426 --> 00:09:08,026
把数据库也关掉

203
00:09:08,026 --> 00:09:09,214
然后再打开

204
00:09:09,214 --> 00:09:11,770
< No Speech >

205
00:09:11,770 --> 00:09:13,050
有没有真的变化

206
00:09:13,050 --> 00:09:14,730
这回可是真的变化了

207
00:09:14,730 --> 00:09:16,770
这就符合了事物的这十大特性

208
00:09:16,770 --> 00:09:18,462
其中最后一项不就是一致性吗

209
00:09:18,462 --> 00:09:21,210
< No Speech >

210
00:09:21,210 --> 00:09:23,806
对不对持久性嘛并且一致性也看出来了是吧

211
00:09:24,378 --> 00:09:28,578
就是按照正常的业务的需求去处理的

212
00:09:28,578 --> 00:09:30,898
它减200它少200它多200

213
00:09:30,898 --> 00:09:31,338
对不对

214
00:09:31,338 --> 00:09:33,726
然后数据都持久化进来了

215
00:09:34,714 --> 00:09:37,714
那么这就是在一个事物当中去完成转账业务的

216
00:09:37,714 --> 00:09:39,714
所以说同学们啊这一点我们一定要注意

217
00:09:39,714 --> 00:09:40,606
未来我们在

218
00:09:41,530 --> 00:09:45,726
在加密的代码中对数据库进行操作时

219
00:09:46,618 --> 00:09:49,566
只要是你有DML操作了,脑子里一定要想到

220
00:09:49,566 --> 00:09:51,258
< No Speech >

221
00:09:51,258 --> 00:09:52,858
是需要受事物控制的

222
00:09:52,858 --> 00:09:54,658
那你在写后面代码的时候

223
00:09:54,658 --> 00:09:55,658
一定要先开启事物

224
00:09:55,658 --> 00:09:57,022
然后再写DM操作

225
00:09:57,530 --> 00:10:00,330
再提交,然后try catch,如果有异常了

226
00:10:00,330 --> 00:10:03,370
在catch一个seven当中再去rollback回滚

227
00:10:03,370 --> 00:10:04,126
不就行了吗?

228
00:10:04,762 --> 00:10:06,242
如果没有异常都成功

229
00:10:06,242 --> 00:10:07,122
如果有异常了

230
00:10:07,122 --> 00:10:08,922
进到Kaizquad里去Roback回归

231
00:10:08,922 --> 00:10:10,622
那原来成功的也都撤销了

232
00:10:10,622 --> 00:10:13,114
< No Speech >

233
00:10:13,114 --> 00:10:15,934
但是我们在回滚的时候有一点需要注意什么呢

234
00:10:16,538 --> 00:10:19,538
需要注意的是事物回滚必须在事物提交之前

235
00:10:19,538 --> 00:10:22,538
因为事物一旦提交就不能再进行回滚操作了

236
00:10:22,538 --> 00:10:24,338
也就是说一旦你的事物commit了

237
00:10:24,338 --> 00:10:26,782
你再去做robot咱们就揉不了了啊

238
00:10:26,782 --> 00:10:28,346
< No Speech >

239
00:10:28,346 --> 00:10:29,662
We commit that

240
00:10:29,662 --> 00:10:32,282
< No Speech >

241
00:10:32,282 --> 00:10:36,822
听明白了吗?那么通过这个案例 我们应该很直观的理解到什么是失误了吧

242
00:10:36,822 --> 00:10:37,374
是不是?

243
00:10:38,010 --> 00:10:40,150
所以这一块大家也都当成重点

244
00:10:40,150 --> 00:10:40,862
还是那句话

245
00:10:41,850 --> 00:10:44,330
加瓦里写对数据库操作的代码的时候

246
00:10:44,330 --> 00:10:45,650
一旦有DML操作了

247
00:10:45,650 --> 00:10:47,650
脑袋里一定要想事物这个概念

248
00:10:47,650 --> 00:10:48,650
事物这个事

249
00:10:48,650 --> 00:10:50,490
它是不是需要受事物控制

250
00:10:50,490 --> 00:10:50,890
对吧

251
00:10:50,890 --> 00:10:52,606
其实是需要受事物控制的

252
00:10:53,530 --> 00:10:59,870
好 那么我们来看一下这节课的实时效果反馈 事物提交语句是什么 a-commit

253
00:10:59,870 --> 00:11:01,082
< No Speech >

254
00:11:01,082 --> 00:11:02,962
然后C,Transaction Commit

255
00:11:02,962 --> 00:11:04,222
D,Transaction Commit

256
00:11:04,762 --> 00:11:06,366
应该是哪个呢?大家想一下

257
00:11:06,366 --> 00:11:08,186
< No Speech >

258
00:11:08,186 --> 00:11:12,062
是不是很显然这个题的答应该是A啊?事物提交不是commit吗?

259
00:11:13,018 --> 00:11:16,350
好,我们再来看一下事物回滚。事物回滚的语句是什么?

260
00:11:16,350 --> 00:11:18,202
< No Speech >

261
00:11:18,202 --> 00:11:21,246
然后Transaction.rework

262
00:11:21,246 --> 00:11:23,162
< No Speech >

263
00:11:23,162 --> 00:11:27,006
是不是应该是A Roback 是吧 所以这两个题的答案是E

264
00:11:27,006 --> 00:11:28,890
< No Speech >

265
00:11:28,890 --> 00:11:33,090
好同学们,那么以上我们通过一个转葬的这样的一个案例

266
00:11:33,090 --> 00:11:35,490
让我们去进一步的使用了一下事物

267
00:11:35,490 --> 00:11:38,290
体会一下事物到底为我们解决了什么问题

268
00:11:38,290 --> 00:11:40,414
好同学们,那我们这一课就到这儿

