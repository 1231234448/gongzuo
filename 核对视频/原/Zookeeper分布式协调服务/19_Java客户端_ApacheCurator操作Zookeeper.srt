1
00:00:00,026 --> 00:00:01,546
Hello小伙伴大家好

2
00:00:01,546 --> 00:00:03,706
这节课我们来学习如何通过

3
00:00:03,706 --> 00:00:07,146
Apache的creator操作Rookieper这个服务

4
00:00:07,146 --> 00:00:10,826
在之前我们通过原生的API操作了Rookieper服务

5
00:00:10,826 --> 00:00:14,066
并且我们还通过了这个叫ZKclient

6
00:00:14,066 --> 00:00:15,666
操作了Rookieper服务

7
00:00:15,666 --> 00:00:18,306
这节课我们来通过这个creator

8
00:00:18,306 --> 00:00:20,106
就是Apache的creator框架

9
00:00:20,106 --> 00:00:22,626
来操作一下这个Rookieper的服务

10
00:00:22,626 --> 00:00:25,306
它和我们这个ZKclient是一样的

11
00:00:25,306 --> 00:00:27,266
也是做了一个包装

12
00:00:27,266 --> 00:00:29,026
也是包括于其中的一些问题

13
00:00:29,026 --> 00:00:30,346
比如说连接从事

14
00:00:30,666 --> 00:00:32,346
反复需要注册water

15
00:00:32,546 --> 00:00:34,546
以及议程方面

16
00:00:34,546 --> 00:00:35,646
它也是做一些

17
00:00:36,346 --> 00:00:39,998
当然了这个curator到目前为止是阿帕奇的

18
00:00:39,998 --> 00:00:41,946
< No Speech >

19
00:00:41,946 --> 00:00:45,406
全世界范围应用的非常广泛的一个客户端

20
00:00:45,426 --> 00:00:48,186
当然它的功能也不仅限于此

21
00:00:48,186 --> 00:00:49,746
我们接着来一块去看

22
00:00:49,986 --> 00:00:52,186
这个create的包一共有三个

23
00:00:52,186 --> 00:00:55,626
第一个它这个是对底层的API做了一些封装

24
00:00:55,626 --> 00:00:57,026
就是简单的做一些封装

25
00:00:57,026 --> 00:00:58,706
第二个就是create client

26
00:00:58,706 --> 00:01:00,586
它是对一些客户端的操作

27
00:01:00,586 --> 00:01:03,106
比如说重视机制做了一些包装

28
00:01:03,226 --> 00:01:05,346
第三个是高级的它拥有的是什么

29
00:01:05,346 --> 00:01:06,346
高级的特性

30
00:01:06,346 --> 00:01:08,106
比如说做一些监听

31
00:01:08,266 --> 00:01:09,786
选举分布式锁

32
00:01:10,226 --> 00:01:11,906
分布式计数器等等

33
00:01:11,906 --> 00:01:14,586
它都做一些高级的一些封装

34
00:01:14,586 --> 00:01:18,066
所以说我们直接通过引入高级的版本

35
00:01:18,066 --> 00:01:22,186
高级的版本肯定包含于之前的一些基础版本

36
00:01:22,186 --> 00:01:23,546
OK 我们来看一下

37
00:01:23,546 --> 00:01:26,106
首先我们要使用create

38
00:01:26,106 --> 00:01:28,546
这个框架来操作rookiever

39
00:01:28,546 --> 00:01:32,146
所以说第一步我们肯定要添加Maven的一个依赖

40
00:01:32,146 --> 00:01:36,026
来把依赖我们直接拿到我们的项目中

41
00:01:36,226 --> 00:01:39,266
在这块我们直接把这个引进来

42
00:01:39,266 --> 00:01:42,346
那这个时候我们的项目是就有creator这个功能了

43
00:01:42,346 --> 00:01:46,106
OK 那这块我们直接创建一个实体类

44
00:01:46,106 --> 00:01:48,254
我们就再叫它creator

45
00:01:48,254 --> 00:01:49,338
< No Speech >

46
00:01:49,338 --> 00:01:50,178
什么呢

47
00:01:50,178 --> 00:01:51,898
啊妹啊走你

48
00:01:51,898 --> 00:01:55,618
在这个里边呢我们直接啊把注释给大家搞定

49
00:01:55,618 --> 00:02:02,658
呃那我们这个实体类呢我们主要是通过curator的这种方式操作了什么呢

50
00:02:02,658 --> 00:02:05,658
rootkeeper啊操作了rootkeeper

51
00:02:05,658 --> 00:02:06,778
走你

52
00:02:06,778 --> 00:02:09,138
那么呢编写一个妹方法

53
00:02:09,138 --> 00:02:10,418
啊编写一个妹方法

54
00:02:10,418 --> 00:02:13,658
那我们那你说我们在之前啊你看我们通过原生的api

55
00:02:13,658 --> 00:02:15,498
我们第一创建绘画是吧

56
00:02:15,498 --> 00:02:18,058
第二个zclient我们要连接rootkeeper

57
00:02:18,058 --> 00:02:18,658
我们干嘛呢

58
00:02:18,658 --> 00:02:22,858
第一步我们都是第一步啊都是创建绘画

59
00:02:22,858 --> 00:02:25,338
< No Speech >

60
00:02:25,338 --> 00:02:27,218
那在这个curator的这种方式呢

61
00:02:27,218 --> 00:02:30,178
那第一步也是啊创建绘画没问题吧

62
00:02:30,178 --> 00:02:33,978
那他的创建绘画呢和我们呃之前的那种方式呢

63
00:02:33,978 --> 00:02:35,618
嗯稍微有一点点麻烦了

64
00:02:35,618 --> 00:02:38,338
因为他人家使用一个叫构建者的这种模式啊

65
00:02:38,338 --> 00:02:43,338
我们首先我们呢先把我们的这个Rookieper的服务啊

66
00:02:43,338 --> 00:02:44,578
Rookieper的一个服务

67
00:02:44,578 --> 00:02:46,098
我们先给他定义出来啊

68
00:02:46,098 --> 00:02:47,338
Rookieper啊

69
00:02:47,338 --> 00:02:49,978
我们说我们Rookieper的集群的一个地址

70
00:02:49,978 --> 00:02:52,858
我们192.168.66.101啊

71
00:02:52,858 --> 00:02:55,018
冒号2181没问题

72
00:02:55,018 --> 00:02:55,538
然后呢

73
00:02:55,538 --> 00:02:59,058
这个冒号的我们应该是英文的冒号啊

74
00:02:59,058 --> 00:02:59,378
然后呢

75
00:02:59,378 --> 00:02:59,858
最后呢

76
00:02:59,858 --> 00:03:03,738
我们来一个最后来一个输入点号OK

77
00:03:03,738 --> 00:03:04,098
然后呢

78
00:03:04,098 --> 00:03:06,018
把这个删掉啊

79
00:03:06,018 --> 00:03:07,538
然后把这个删掉搞定

80
00:03:07,538 --> 00:03:07,978
然后呢

81
00:03:07,978 --> 00:03:08,938
写个逗号啊

82
00:03:08,938 --> 00:03:11,538
我们直接把那个地址先给他搞定啊

83
00:03:11,538 --> 00:03:13,618
一台机器两台机器三台机器

84
00:03:13,618 --> 00:03:17,338
101 102 103没问题吧

85
00:03:17,338 --> 00:03:17,698
然后呢

86
00:03:17,698 --> 00:03:18,338
在最后边呢

87
00:03:18,338 --> 00:03:19,338
我们写一个分号

88
00:03:19,338 --> 00:03:20,498
OK搞定啊

89
00:03:20,498 --> 00:03:20,818
然后呢

90
00:03:20,818 --> 00:03:23,018
我们这个是创建绘画

91
00:03:23,018 --> 00:03:25,258
创建绘画

92
00:03:25,258 --> 00:03:26,138
那我们创建绘画

93
00:03:26,138 --> 00:03:27,218
我们应该怎么创建呢

94
00:03:27,218 --> 00:03:28,178
在人家curator里边

95
00:03:28,178 --> 00:03:29,338
也还有创建者工程嘛

96
00:03:29,338 --> 00:03:29,698
是吧

97
00:03:29,698 --> 00:03:30,618
创建者模式

98
00:03:30,618 --> 00:03:30,938
所以说呢

99
00:03:30,938 --> 00:03:32,938
我们要通过curator

100
00:03:32,938 --> 00:03:34,098
curator啊

101
00:03:34,098 --> 00:03:35,298
不是创建者模式啊

102
00:03:35,298 --> 00:03:37,018
它是一个叫工程模式

103
00:03:37,018 --> 00:03:37,658
curator

104
00:03:37,658 --> 00:03:38,618
curator

105
00:03:38,618 --> 00:03:39,898
这个叫叫什么

106
00:03:39,898 --> 00:03:40,818
factory啊

107
00:03:40,818 --> 00:03:41,818
你看firmware

108
00:03:41,818 --> 00:03:42,538
factory

109
00:03:42,538 --> 00:03:44,098
我们通过这个创建者模式

110
00:03:44,098 --> 00:03:45,778
我们点builder点儿

111
00:03:45,778 --> 00:03:47,038
在点个什么呢

112
00:03:47,546 --> 00:03:51,546
点build我们开始构建啊开始构建点我们继续点点一个

113
00:03:51,546 --> 00:03:53,946
呃connection啊connection

114
00:03:53,946 --> 00:03:56,866
我们来看干嘛呢把我们的这个

115
00:03:56,866 --> 00:03:58,330
< No Speech >

116
00:03:58,330 --> 00:04:00,330
连接的地址放进去

117
00:04:00,330 --> 00:04:00,970
那这个时候呢

118
00:04:00,970 --> 00:04:03,810
他就知道了我们的Rookieper的服务在哪里了

119
00:04:03,810 --> 00:04:04,210
当然了

120
00:04:04,210 --> 00:04:07,970
我们还需要一个超时时间就是这个timeout

121
00:04:07,970 --> 00:04:08,730
这个timeout呢

122
00:04:08,730 --> 00:04:11,170
我们设置超时时间呢是5秒啊

123
00:04:11,170 --> 00:04:12,330
超时时间是5秒

124
00:04:12,330 --> 00:04:12,690
当然了

125
00:04:12,690 --> 00:04:15,770
我们还需要一个断开床式的一个机制

126
00:04:15,770 --> 00:04:17,290
那这个断开床式的这个机制呢

127
00:04:17,290 --> 00:04:19,330
我们给他设置一下吧

128
00:04:19,330 --> 00:04:22,930
比如说我们给他设置为1000秒

129
00:04:22,930 --> 00:04:23,902
1000秒

130
00:04:24,826 --> 00:04:27,386
走你,然后呢我们写个3

131
00:04:27,386 --> 00:04:28,706
OK,搞定

132
00:04:28,706 --> 00:04:31,186
那完了之后呢,最后啊最后完了

133
00:04:31,186 --> 00:04:33,666
我们就需要把它给构建出来,build

134
00:04:33,666 --> 00:04:34,666
啊,构建出来

135
00:04:34,666 --> 00:04:35,866
那完了之后呢

136
00:04:35,866 --> 00:04:38,146
我们就把这个绘画就给创建成功了

137
00:04:38,146 --> 00:04:39,706
非常的简单啊,非常的简单

138
00:04:39,706 --> 00:04:41,386
我们通过一个工程模式

139
00:04:41,386 --> 00:04:43,906
我们来创建一个curator的一个绘画

140
00:04:43,906 --> 00:04:46,306
然后呢我们通过它得到的是一个什么呢

141
00:04:46,306 --> 00:04:48,306
哎,返回值给大家写上

142
00:04:48,306 --> 00:04:51,106
给它简写为curl,OK

143
00:04:51,106 --> 00:04:54,106
那这个,这个到底连上我们这个rookie分了吗

144
00:04:54,106 --> 00:04:55,426
还真正没有连接呢

145
00:04:55,426 --> 00:04:56,546
只是把这个什么呢

146
00:04:56,546 --> 00:04:57,786
绘画创建出来了

147
00:04:57,786 --> 00:04:58,986
那怎么去连接呢

148
00:04:58,986 --> 00:05:01,826
来走你,我们来看看怎么去连接啊

149
00:05:01,826 --> 00:05:05,106
连接我们通过cur.start

150
00:05:05,106 --> 00:05:09,146
就是start这个方法才真正的去连接到我们这个rookie分

151
00:05:09,146 --> 00:05:10,866
啊,真正的连接到这个rookie分

152
00:05:10,866 --> 00:05:11,826
非常的简单

153
00:05:11,826 --> 00:05:14,386
这第一步啊我们创建绘画创建成功了是不是

154
00:05:14,386 --> 00:05:15,346
那完了之后呢

155
00:05:15,346 --> 00:05:17,626
无非就是第一个创建节点

156
00:05:17,626 --> 00:05:18,626
啊,第一个要做的啊

157
00:05:18,626 --> 00:05:22,706
我们就该看看该如何创建一个节点

158
00:05:22,706 --> 00:05:24,106
如何创建一个节点

159
00:05:24,106 --> 00:05:26,706
我们呢通过cur.

160
00:05:26,706 --> 00:05:28,026
我们能点上点什么呢

161
00:05:28,026 --> 00:05:29,746
之前我们创建一个节点啊

162
00:05:29,746 --> 00:05:30,666
我们是不是create

163
00:05:30,666 --> 00:05:32,066
那它呢是不是也叫create

164
00:05:32,066 --> 00:05:33,026
我们来create一下

165
00:05:33,026 --> 00:05:34,626
你看是不是也是create

166
00:05:34,626 --> 00:05:35,706
那create以后

167
00:05:35,706 --> 00:05:38,106
咦,这个create里边也不能写东西啊

168
00:05:38,106 --> 00:05:39,146
是吧,空的

169
00:05:39,146 --> 00:05:40,106
那怎么办呢

170
00:05:40,106 --> 00:05:41,666
它呢是通过.

171
00:05:41,666 --> 00:05:44,106
你看,就说你要创建一个节点

172
00:05:44,106 --> 00:05:45,946
然后呢你后边你是一个

173
00:05:45,946 --> 00:05:47,826
就是你是一个什么样的一个模式啊

174
00:05:47,826 --> 00:05:48,986
你看我们叫,有个叫

175
00:05:48,986 --> 00:05:52,906
write w w i t h

176
00:05:52,906 --> 00:05:54,386
什么的,你看有个model

177
00:05:54,386 --> 00:05:56,706
这个model代表的就是我们的这个节点

178
00:05:56,706 --> 00:05:57,866
你是一个什么节点啊

179
00:05:57,866 --> 00:06:00,226
我们呢直接create model.

180
00:06:00,226 --> 00:06:01,986
什么的,持久型节点

181
00:06:01,986 --> 00:06:02,786
没问题吧

182
00:06:02,786 --> 00:06:03,746
那完了之后呢

183
00:06:03,746 --> 00:06:06,546
我们可以再写个.forpass

184
00:06:06,546 --> 00:06:07,226
forpass

185
00:06:07,226 --> 00:06:09,826
这代表的是我们这个节点的一个名字啊

186
00:06:09,826 --> 00:06:12,106
比如说我们叫node3

187
00:06:12,106 --> 00:06:13,906
然后呢,那节点的值呢

188
00:06:13,906 --> 00:06:14,826
啊,节点的值呢

189
00:06:14,826 --> 00:06:16,226
我们直接动画啊

190
00:06:16,226 --> 00:06:18,266
写一个3

191
00:06:18,266 --> 00:06:18,906
搞定

192
00:06:18,906 --> 00:06:19,746
就搞定了

193
00:06:19,746 --> 00:06:20,906
然后呢在最后啊

194
00:06:20,906 --> 00:06:22,506
最后我们写一个冒号

195
00:06:22,506 --> 00:06:23,946
然后呢我们不仅要写这个

196
00:06:23,946 --> 00:06:24,626
我们还这个

197
00:06:24,626 --> 00:06:25,026
因为什么呢

198
00:06:25,026 --> 00:06:27,426
因为它的这个forpass后面要的是什么类型

199
00:06:27,426 --> 00:06:29,346
你看叫自解数组是吧

200
00:06:29,346 --> 00:06:31,306
所以说我们还得.get一下

201
00:06:31,306 --> 00:06:31,826
ok

202
00:06:31,826 --> 00:06:33,626
然后呢它可能要抛出一个异常

203
00:06:33,626 --> 00:06:34,586
解决了这个异常问题

204
00:06:34,586 --> 00:06:35,106
ok

205
00:06:35,106 --> 00:06:36,466
那我们可以通过这个东西啊

206
00:06:36,466 --> 00:06:38,226
你看我们通过create

207
00:06:38,226 --> 00:06:39,266
给它一个模式

208
00:06:39,266 --> 00:06:40,306
然后呢再给大家节点

209
00:06:40,306 --> 00:06:41,706
所以我们通过这种方式呢

210
00:06:41,706 --> 00:06:42,866
来创建的节点啊

211
00:06:42,866 --> 00:06:43,786
来试试吧

212
00:06:43,786 --> 00:06:45,506
我们来看看到底能不能

213
00:06:45,506 --> 00:06:47,386
帮我们创建出来一个节点呀

214
00:06:47,386 --> 00:06:48,866
叫node3是不是

215
00:06:48,866 --> 00:06:50,106
直接运行一下

216
00:06:50,106 --> 00:06:57,018
< No Speech >

217
00:06:57,018 --> 00:07:00,418
我们的这个日志怎么没了呢

218
00:07:00,418 --> 00:07:02,418
把这个日志给弄出来

219
00:07:02,418 --> 00:07:04,698
< No Speech >

220
00:07:04,698 --> 00:07:06,698
日志日志走你

221
00:07:06,698 --> 00:07:08,762
< No Speech >

222
00:07:08,762 --> 00:07:10,442
日志跑哪去了呀

223
00:07:10,442 --> 00:07:11,202
在这呢是吧

224
00:07:11,202 --> 00:07:12,042
执行完成了

225
00:07:12,042 --> 00:07:12,882
那完成之后呢

226
00:07:12,882 --> 00:07:15,322
我们再来看我们的这个命令和中断里边

227
00:07:15,322 --> 00:07:16,802
我们看看有没有那个note3了

228
00:07:16,802 --> 00:07:18,642
你看note3是不是出来了

229
00:07:18,642 --> 00:07:21,682
是不是说明我们通过这种curator框架的这种方式

230
00:07:21,682 --> 00:07:23,882
已经操作了主K本这个集群了

231
00:07:23,882 --> 00:07:25,162
操作主K本这个集群了

232
00:07:25,162 --> 00:07:26,122
我们创建了节点

233
00:07:26,122 --> 00:07:27,762
来继续第三个

234
00:07:27,762 --> 00:07:30,162
第三个我们来看看该如何

235
00:07:30,162 --> 00:07:31,282
我们能创建节点

236
00:07:31,282 --> 00:07:33,922
那我们能不能获取数据啊

237
00:07:33,922 --> 00:07:35,002
是不是啊

238
00:07:35,002 --> 00:07:36,522
获取数据

239
00:07:36,522 --> 00:07:37,482
那获取数据呢

240
00:07:37,482 --> 00:07:41,242
我们还是通过curator这种方式点什么呢

241
00:07:41,242 --> 00:07:42,882
肯定是get什么呢

242
00:07:42,882 --> 00:07:45,202
你看啊get data是不是啊

243
00:07:45,202 --> 00:07:46,722
那get data我们点

244
00:07:46,722 --> 00:07:47,602
在点什么呢

245
00:07:47,602 --> 00:07:50,482
我们可以get data for path

246
00:07:50,482 --> 00:07:51,802
就是你要获取数据

247
00:07:51,802 --> 00:07:54,562
你要拿到这个获取的这个这个地址是什么

248
00:07:54,562 --> 00:07:57,642
我们肯定要获取的是这个斜杆note3

249
00:07:57,642 --> 00:07:58,362
没问题吧

250
00:07:58,362 --> 00:07:59,682
然后获取完了之后

251
00:07:59,682 --> 00:08:01,162
那你得到这个数据了吗

252
00:08:01,162 --> 00:08:02,802
我们压根还没有得到的是不是啊

253
00:08:02,802 --> 00:08:04,322
我们直接给他来个返回值

254
00:08:04,322 --> 00:08:05,442
< No Speech >

255
00:08:05,442 --> 00:08:06,122
来个返回值

256
00:08:06,122 --> 00:08:07,922
我得到的是一个字节数组

257
00:08:07,922 --> 00:08:08,282
然后呢

258
00:08:08,282 --> 00:08:11,682
我们要通过new的一个string这个类型啊

259
00:08:11,682 --> 00:08:12,602
我们把这个

260
00:08:13,602 --> 00:08:15,002
这个字节数组扔进去啊

261
00:08:15,002 --> 00:08:15,922
通过这种方式呢

262
00:08:15,922 --> 00:08:17,442
我们就可以干嘛呢

263
00:08:17,442 --> 00:08:19,042
我们可以获得到这个数据啊

264
00:08:19,042 --> 00:08:20,562
我们直接运行起来

265
00:08:20,562 --> 00:08:23,602
试试看能不能得到我们那个3

266
00:08:23,602 --> 00:08:24,642
你看是不是出来了

267
00:08:24,642 --> 00:08:26,722
这就是我们获取了一个什么呢

268
00:08:26,722 --> 00:08:27,882
获取了一个数据啊

269
00:08:27,882 --> 00:08:28,762
获取数据

270
00:08:28,762 --> 00:08:29,802
我们来看第四个

271
00:08:29,802 --> 00:08:31,042
< No Speech >

272
00:08:31,042 --> 00:08:32,002
这个第四个呢

273
00:08:32,002 --> 00:08:33,962
我们来看一下我们到底

274
00:08:33,962 --> 00:08:36,482
就是我们该如何查看

275
00:08:36,482 --> 00:08:37,882
就我该如何删除吧

276
00:08:37,882 --> 00:08:40,190
我们该如何删除一个节点

277
00:08:40,190 --> 00:08:41,274
< No Speech >

278
00:08:41,274 --> 00:08:43,994
该如何删除节点

279
00:08:43,994 --> 00:08:45,514
我想删除一个节点

280
00:08:45,514 --> 00:08:46,794
我们该如何去做

281
00:08:46,794 --> 00:08:48,314
删除节点该如何去做

282
00:08:48,314 --> 00:08:51,514
我们删除我们通过delete是不是

283
00:08:51,514 --> 00:08:52,714
我们通过delete吧

284
00:08:52,714 --> 00:08:55,794
Curl.delete

285
00:08:55,794 --> 00:08:56,834
有没有delete的方法

286
00:08:56,834 --> 00:08:57,354
有

287
00:08:57,354 --> 00:08:59,754
然后.for干嘛

288
00:08:59,754 --> 00:09:00,474
for pass

289
00:09:00,474 --> 00:09:01,354
我们发现没有

290
00:09:01,354 --> 00:09:02,514
就是所有的方法

291
00:09:02,514 --> 00:09:04,434
后边是不是都通过一个方法去进行调用

292
00:09:04,434 --> 00:09:05,674
你看这里是不是要for pass

293
00:09:05,674 --> 00:09:06,994
代表的是我要跟一个节点的名字

294
00:09:06,994 --> 00:09:08,354
这个时候也跟一个节点名字

295
00:09:08,354 --> 00:09:10,514
比如说node3

296
00:09:10,514 --> 00:09:11,794
非常的简单

297
00:09:11,794 --> 00:09:13,594
我们通过delete.for.pass

298
00:09:13,594 --> 00:09:14,394
我们就可以干嘛

299
00:09:14,514 --> 00:09:15,874
就可以删除一个节点

300
00:09:16,074 --> 00:09:19,594
记住这是删除一个节点

301
00:09:20,314 --> 00:09:21,954
就是删除一个节点

302
00:09:21,954 --> 00:09:23,594
我们就通过delete.for.pass

303
00:09:23,754 --> 00:09:25,234
就可以删除一个节点

304
00:09:25,434 --> 00:09:27,074
然后我们运行起来试试看

305
00:09:27,194 --> 00:09:28,594
把这个给大家注释掉

306
00:09:28,594 --> 00:09:30,174
然后我们一走

307
00:09:30,174 --> 00:09:34,394
< No Speech >

308
00:09:34,394 --> 00:09:35,194
OK

309
00:09:35,194 --> 00:09:36,634
然后打开我们的命令和中端

310
00:09:36,634 --> 00:09:37,994
我们通过ls斜杠

311
00:09:37,994 --> 00:09:38,674
我来看看

312
00:09:38,674 --> 00:09:40,234
这个note3就不见了

313
00:09:40,394 --> 00:09:41,034
就被干掉了

314
00:09:41,034 --> 00:09:42,034
然后再把这个中掉

315
00:09:42,114 --> 00:09:42,714
继续

316
00:09:42,754 --> 00:09:43,274
大家注意

317
00:09:43,354 --> 00:09:44,714
我们这是删除一个节点

318
00:09:44,874 --> 00:09:45,874
如果说这个节点

319
00:09:45,874 --> 00:09:46,994
它包含了子节点

320
00:09:47,194 --> 00:09:48,834
比如说你看我们第5个

321
00:09:49,714 --> 00:09:50,514
第5个

322
00:09:50,514 --> 00:09:52,274
比如说我们要删除的是什么

323
00:09:52,394 --> 00:09:55,554
我们要删除的是一个子节点

324
00:09:55,994 --> 00:09:57,834
删除一个节点

325
00:09:57,874 --> 00:10:01,834
但是这个节点里面

326
00:10:02,074 --> 00:10:03,834
里面有子节点

327
00:10:03,834 --> 00:10:04,634
明白没有

328
00:10:04,634 --> 00:10:05,994
我要递归去删

329
00:10:06,034 --> 00:10:06,994
比如说我们在这边

330
00:10:07,114 --> 00:10:07,714
我们再创建

331
00:10:07,714 --> 00:10:08,714
ced

332
00:10:08,714 --> 00:10:10,554
< No Speech >

333
00:10:10,554 --> 00:10:12,874
Create-node3

334
00:10:12,874 --> 00:10:14,354
里面是个3

335
00:10:14,354 --> 00:10:18,754
但是呢我们在Create-node3里面放一个a

336
00:10:18,754 --> 00:10:23,554
然后呢我们在Create-node3里面放一个b

337
00:10:23,554 --> 00:10:25,754
大家记住 放一个b

338
00:10:25,754 --> 00:10:28,634
相当于是在node3里面有个a有个b是不是

339
00:10:28,634 --> 00:10:31,514
但是如果我们用这个方式去删

340
00:10:31,514 --> 00:10:32,634
它肯定不让删了 为什么

341
00:10:32,634 --> 00:10:34,274
因为它有个子节点了

342
00:10:34,274 --> 00:10:37,154
那如果说用这种子节点我们到底该如何去删

343
00:10:37,154 --> 00:10:38,514
这个时候呢我们要通过

344
00:10:38,514 --> 00:10:40,754
.delete

345
00:10:40,754 --> 00:10:43,274
点一个什么呢 我们要点一个wait

346
00:10:43,274 --> 00:10:44,834
点一个delete

347
00:10:44,834 --> 00:10:45,874
你看有个叫delete什么的

348
00:10:45,874 --> 00:10:46,754
delete

349
00:10:46,754 --> 00:10:48,754
这个叫children if new的什么的

350
00:10:48,754 --> 00:10:49,634
什么什么的东西啊

351
00:10:49,634 --> 00:10:50,874
它则代表的是什么呢

352
00:10:50,874 --> 00:10:52,714
它则for pass

353
00:10:52,714 --> 00:10:54,754
它就代表的是我们需要

354
00:10:54,754 --> 00:10:56,074
递归去删

355
00:10:56,074 --> 00:10:58,474
递归去删除这个node3

356
00:10:58,474 --> 00:11:02,154
OK 这就是递归去删除所有的子节点

357
00:11:02,154 --> 00:11:04,074
来 我们试试看啊

358
00:11:04,074 --> 00:11:04,754
没问题

359
00:11:04,754 --> 00:11:08,674
然后呢我们再来看我们这个斜杠node3还在不在

360
00:11:08,674 --> 00:11:09,874
你看是不是不在了

361
00:11:09,874 --> 00:11:11,474
或者斜杠l看看

362
00:11:11,474 --> 00:11:12,394
说明node3不在了

363
00:11:12,394 --> 00:11:14,514
它给我们以递归的这种方式删掉了

364
00:11:14,514 --> 00:11:17,034
那这个方法呢其实就是递归删除

365
00:11:17,034 --> 00:11:19,678
是不是啊 叫递归

366
00:11:20,314 --> 00:11:24,514
地归删除这个节点搞定了

367
00:11:24,514 --> 00:11:25,674
那我们学会了删除

368
00:11:25,674 --> 00:11:28,114
我们来看看该如何修改一个节点

369
00:11:28,114 --> 00:11:29,114
走你

370
00:11:29,234 --> 00:11:30,954
那第6个

371
00:11:30,954 --> 00:11:35,114
第6个我们该如何修改节点

372
00:11:35,554 --> 00:11:37,434
我们该如何修改这个节点

373
00:11:38,114 --> 00:11:41,874
我们在前边我们获取数据叫get data

374
00:11:41,874 --> 00:11:46,074
那我们在修改节点肯定就是set data

375
00:11:46,074 --> 00:11:46,994
还真有是吧

376
00:11:46,994 --> 00:11:48,474
for pass有吧

377
00:11:48,474 --> 00:11:49,714
我们写一个地址

378
00:11:49,714 --> 00:11:52,994
既然说我们要修改更新一个节点

379
00:11:52,994 --> 00:11:54,474
那这个for pass斜杠

380
00:11:54,474 --> 00:11:57,794
比如说我想把这个node3

381
00:11:57,794 --> 00:11:59,954
因为node3里边

382
00:11:59,954 --> 00:12:01,434
比如说假如是个3的话

383
00:12:01,434 --> 00:12:02,714
我要给它修改一下

384
00:12:02,714 --> 00:12:04,394
比如说给它改成某一个值

385
00:12:04,394 --> 00:12:05,754
.get basis

386
00:12:05,754 --> 00:12:07,714
然后我们在这里边

387
00:12:07,794 --> 00:12:09,394
我们来一个百战

388
00:12:09,674 --> 00:12:10,074
走你

389
00:12:10,194 --> 00:12:11,154
我们通过这种方式

390
00:12:11,154 --> 00:12:12,314
就可以修改一个值

391
00:12:12,474 --> 00:12:13,234
比较简单

392
00:12:13,234 --> 00:12:15,554
在这块我们直接通过create

393
00:12:15,554 --> 00:12:17,194
下滑线node3

394
00:12:17,274 --> 00:12:18,554
里边放了个3

395
00:12:18,554 --> 00:12:21,274
因为我们刚刚是不是已经删除掉节点了

396
00:12:21,394 --> 00:12:22,994
所以说我们需要重新建出来

397
00:12:23,274 --> 00:12:26,194
就是node3里边放了一个3

398
00:12:26,194 --> 00:12:26,874
OK

399
00:12:26,874 --> 00:12:28,394
然后我们再执行我们这句话

400
00:12:28,394 --> 00:12:31,914
它是不是帮我们把里边的3改成了百战了

401
00:12:31,914 --> 00:12:35,794
然后继续我们可以通过get斜杠node3

402
00:12:35,794 --> 00:12:37,194
你看变成了百战

403
00:12:37,314 --> 00:12:38,434
非常的简单

404
00:12:38,674 --> 00:12:40,794
既然说我们学会了如何添加

405
00:12:40,794 --> 00:12:41,994
如何删除是吧

406
00:12:41,994 --> 00:12:43,194
如何更新

407
00:12:43,194 --> 00:12:46,074
如何获取等等一系列的操作

408
00:12:46,074 --> 00:12:49,434
我该如何获取某一个节点下面的子节点

409
00:12:49,634 --> 00:12:50,354
第7个

410
00:12:50,634 --> 00:12:58,114
就是我该如何获取某个节点的

411
00:12:58,634 --> 00:13:01,074
所有子节点

412
00:13:01,274 --> 00:13:03,154
获取子节点说白了

413
00:13:03,394 --> 00:13:06,674
我通过curator.getchildren

414
00:13:06,754 --> 00:13:07,994
然后在这个里边

415
00:13:08,234 --> 00:13:09,714
这个里边我们通过点

416
00:13:09,714 --> 00:13:10,634
是你看注意

417
00:13:10,754 --> 00:13:12,074
for有个什么

418
00:13:12,314 --> 00:13:13,994
有个叫for pass有没有

419
00:13:13,994 --> 00:13:14,514
没有

420
00:13:14,514 --> 00:13:17,194
这怎么打了个getconfig

421
00:13:17,194 --> 00:13:17,914
打错了

422
00:13:17,914 --> 00:13:20,234
我们应该是getchildren是吧

423
00:13:20,234 --> 00:13:22,034
是不是这个点的岔皮了

424
00:13:22,034 --> 00:13:23,194
我们就该for pass

425
00:13:23,194 --> 00:13:24,394
然后你要查啥

426
00:13:24,394 --> 00:13:27,074
比如说我要查看node3

427
00:13:27,314 --> 00:13:28,074
没问题吧

428
00:13:28,074 --> 00:13:29,554
然后我得到的是一个什么

429
00:13:29,754 --> 00:13:31,794
是一个list类型

430
00:13:31,794 --> 00:13:32,434
是不是

431
00:13:32,434 --> 00:13:34,554
然后我们只要一遍历史就OK了

432
00:13:35,074 --> 00:13:35,634
大家注意

433
00:13:35,634 --> 00:13:36,914
node3是不是还没有

434
00:13:37,034 --> 00:13:37,994
我们来给它来一个

435
00:13:37,994 --> 00:13:42,874
我们叫curator.node3里边的a

436
00:13:42,874 --> 00:13:43,794
然后一个a

437
00:13:43,794 --> 00:13:45,994
然后再来一个node3里面的一个b

438
00:13:45,994 --> 00:13:46,434
一个b

439
00:13:46,434 --> 00:13:48,114
OK还是一个a一个b是吧

440
00:13:48,114 --> 00:13:49,834
然后我们再去运行的时候

441
00:13:49,954 --> 00:13:50,954
我们会发现

442
00:13:50,954 --> 00:13:52,514
它就帮我们把子节点

443
00:13:52,634 --> 00:13:53,474
也给获得到了

444
00:13:53,474 --> 00:13:55,074
你看一个a一个b没问题

445
00:13:55,194 --> 00:13:56,434
它通过这种方式去做

446
00:13:56,474 --> 00:13:59,474
但是在我们完了

447
00:13:59,714 --> 00:14:00,914
比如说基础操作都做完了

448
00:14:01,034 --> 00:14:03,994
我们该如何对它进行一些监听的一些工作

449
00:14:04,674 --> 00:14:06,514
比如说监听的机制

450
00:14:06,754 --> 00:14:08,234
监听的机制

451
00:14:08,514 --> 00:14:09,714
我们该如何去做

452
00:14:09,714 --> 00:14:11,234
但是在curator中

453
00:14:11,434 --> 00:14:13,154
curator中它的监听机制

454
00:14:13,154 --> 00:14:15,554
我们需要通过node一个叫做

455
00:14:15,554 --> 00:14:17,034
node什么

456
00:14:17,274 --> 00:14:17,874
catch

457
00:14:17,874 --> 00:14:19,434
我们通过nodecatch

458
00:14:19,714 --> 00:14:21,314
来去做监听机制

459
00:14:21,314 --> 00:14:22,954
对哪个节点就在监听机制

460
00:14:23,114 --> 00:14:26,514
比如说对叫做node3

461
00:14:26,674 --> 00:14:27,434
这个节点

462
00:14:27,554 --> 00:14:29,434
实现监听的机制

463
00:14:29,794 --> 00:14:30,634
我们怎么去做

464
00:14:30,794 --> 00:14:32,274
首先我们通过它

465
00:14:32,514 --> 00:14:34,594
它什么监听机制

466
00:14:34,794 --> 00:14:36,554
这个叫nodecatch

467
00:14:36,554 --> 00:14:39,354
通过它点有一个叫做get

468
00:14:39,354 --> 00:14:41,674
你看是不是有个叫get listener

469
00:14:41,674 --> 00:14:42,194
有没有

470
00:14:42,194 --> 00:14:44,194
没有get listener

471
00:14:44,194 --> 00:14:46,234
有get listener label是吧

472
00:14:46,234 --> 00:14:48,314
点你看ad的一个listener

473
00:14:48,314 --> 00:14:50,274
是我添加一个监听机制

474
00:14:50,314 --> 00:14:50,714
是不是

475
00:14:51,314 --> 00:14:52,634
我们把这个扔进去

476
00:14:52,634 --> 00:14:54,594
然后我们需要new

477
00:14:54,594 --> 00:14:58,434
或者说我们用用lambda表达式的这种写法去做

478
00:14:58,714 --> 00:15:00,714
在这个里边我们能写一句话

479
00:15:00,794 --> 00:15:02,154
就说被修改了

480
00:15:02,634 --> 00:15:03,674
比较简单

481
00:15:03,914 --> 00:15:07,114
被修改了

482
00:15:07,114 --> 00:15:08,154
点点点

483
00:15:08,154 --> 00:15:10,034
你看我们监听node3这个节点

484
00:15:10,034 --> 00:15:12,794
并且让他睡眠个10万8000年

485
00:15:13,074 --> 00:15:14,434
我们让他sleep

486
00:15:14,434 --> 00:15:16,638
浪是吧

487
00:15:17,434 --> 00:15:20,594
再来个浪类想点,max value

488
00:15:20,594 --> 00:15:22,874
然后我们直接运行走你

489
00:15:22,874 --> 00:15:24,554
我们通过这个方式就可以监听了

490
00:15:24,554 --> 00:15:25,594
非常的方便

491
00:15:25,594 --> 00:15:27,274
当然了这种监听也就是永久的了

492
00:15:27,274 --> 00:15:28,554
它就不是一次性的了

493
00:15:28,554 --> 00:15:29,834
我们可以一直去用

494
00:15:29,834 --> 00:15:30,994
比如说我们走你

495
00:15:30,994 --> 00:15:31,594
我们来改一个

496
00:15:31,874 --> 00:15:33,514
我们set一个斜杠

497
00:15:33,514 --> 00:15:35,314
node3给它改成a

498
00:15:35,554 --> 00:15:36,914
大家注意你看进来以后

499
00:15:37,674 --> 00:15:39,634
这个是我们是监听node3吗

500
00:15:39,834 --> 00:15:40,234
没问题

501
00:15:40,874 --> 00:15:41,794
为什么不执行呢

502
00:15:41,794 --> 00:15:43,794
是因为我们虽然我们写了个监听

503
00:15:43,794 --> 00:15:44,994
但是我们没让监听运行

504
00:15:44,994 --> 00:15:48,234
我们需要让监听点start一下

505
00:15:48,234 --> 00:15:49,354
让它先跑起来

506
00:15:49,634 --> 00:15:50,474
先让它跑起来

507
00:15:50,474 --> 00:15:51,834
然后我们再重新去跑

508
00:15:52,074 --> 00:15:52,834
重新去走

509
00:15:53,394 --> 00:15:54,674
完了之后我们先清空

510
00:15:54,834 --> 00:15:55,874
在这里边让我们走你

511
00:15:55,874 --> 00:15:58,354
你看我们set斜杠node3

512
00:15:58,354 --> 00:15:59,314
然后写个b

513
00:16:00,074 --> 00:16:00,834
你看被修改了

514
00:16:00,834 --> 00:16:02,034
你看假如我再关掉

515
00:16:02,314 --> 00:16:04,234
它的监听机制是永久都会存在的

516
00:16:04,234 --> 00:16:05,714
你看比如说我们再set一个

517
00:16:05,914 --> 00:16:07,634
set3c

518
00:16:07,954 --> 00:16:09,594
看是不是又打印出来了是吧

519
00:16:09,594 --> 00:16:12,354
然后比如说我们再set斜杠node3

520
00:16:12,354 --> 00:16:13,354
斜杠d

521
00:16:13,594 --> 00:16:14,274
是又来了

522
00:16:14,274 --> 00:16:15,314
就是我们监听机制

523
00:16:15,394 --> 00:16:16,754
它永久都不会去停止了

524
00:16:16,754 --> 00:16:17,354
这就是

525
00:16:17,914 --> 00:16:19,634
减少了我们之前所说的问题

526
00:16:19,634 --> 00:16:20,794
就是我们的监听机制

527
00:16:20,794 --> 00:16:22,674
需要重复注册的问题

528
00:16:22,794 --> 00:16:23,274
好了

529
00:16:23,474 --> 00:16:25,914
以上就是我们curator的一些基本的操作

530
00:16:25,914 --> 00:16:27,354
当然了我们curator的操作

531
00:16:27,474 --> 00:16:28,394
远不止于此

532
00:16:28,394 --> 00:16:28,994
是不是

533
00:16:28,994 --> 00:16:29,914
我们说curator

534
00:16:30,034 --> 00:16:31,994
它还封锁一些高级的特性

535
00:16:32,194 --> 00:16:33,794
比如说事件监听

536
00:16:34,594 --> 00:16:35,154
选举

537
00:16:35,474 --> 00:16:36,114
分布式锁

538
00:16:36,434 --> 00:16:38,154
分布式技术器等等

539
00:16:38,154 --> 00:16:40,034
那就是说当这些高级的特性

540
00:16:40,154 --> 00:16:41,154
我们在后续的课程中

541
00:16:41,474 --> 00:16:43,274
在具体的应用场景里边

542
00:16:43,274 --> 00:16:44,474
我们可能就会要用到

543
00:16:44,474 --> 00:16:45,914
相应的技术去实现了

544
00:16:46,114 --> 00:16:48,194
小伙伴先和他说一声

545
00:16:48,194 --> 00:16:48,594
Hello

546
00:16:48,754 --> 00:16:49,634
打一个招呼

547
00:16:49,634 --> 00:16:50,234
在后续

548
00:16:50,234 --> 00:16:51,914
我们如果要需要用到

549
00:16:51,914 --> 00:16:53,514
比如说类似于分布式锁

550
00:16:53,514 --> 00:16:55,194
分布式技术器的这种效果

551
00:16:55,194 --> 00:16:56,154
在这种技术的时候

552
00:16:56,394 --> 00:16:57,714
我们就可以直接使用

553
00:16:57,714 --> 00:16:59,194
apache里边的curator

554
00:16:59,194 --> 00:16:59,994
来进行什么

555
00:16:59,994 --> 00:17:00,994
直接实现

556
00:17:01,074 --> 00:17:01,594
好了

557
00:17:01,754 --> 00:17:03,674
这节课我们学习curator

558
00:17:03,914 --> 00:17:05,314
到这就结束了

559
00:17:05,314 --> 00:17:06,494
谢谢大家

