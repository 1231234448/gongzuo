1
00:00:00,538 --> 00:00:01,898
Hello 小伙伴大家好

2
00:00:01,898 --> 00:00:06,818
这节课我们来继续通过RuKeypr的原生API操作下这个RuKeypr

3
00:00:06,818 --> 00:00:09,538
我们在上一节课我们做了一些简单的操作

4
00:00:09,538 --> 00:00:11,938
比如说创建节点 创建绘画

5
00:00:11,938 --> 00:00:14,218
如何删除修改查询节点

6
00:00:14,218 --> 00:00:19,098
这节课我们来继续学习如何去实现监听的机制

7
00:00:19,098 --> 00:00:21,058
我们来看看到底该如何去做

8
00:00:21,058 --> 00:00:22,738
打开我们的一个编辑器

9
00:00:22,738 --> 00:00:26,298
在这块我们直接再创建一个实体类

10
00:00:26,298 --> 00:00:26,398
然后制作一个编辑器来整理现有计划的应用

11
00:00:26,398 --> 00:00:31,514
< No Speech >

12
00:00:31,514 --> 00:00:36,634
在这个里边我们主要用它来去实现原生的API

13
00:00:36,634 --> 00:00:38,590
原生的API去实现什么呢

14
00:00:38,590 --> 00:00:39,610
< No Speech >

15
00:00:39,610 --> 00:00:41,410
监听的机制

16
00:00:41,590 --> 00:00:44,590
就是我们通过原生的API来实现监听的机制

17
00:00:44,590 --> 00:00:45,870
我们该如何去做

18
00:00:45,870 --> 00:00:48,970
上节课我们实现的是一堆比较简单的操作

19
00:00:48,970 --> 00:00:51,550
这节课我们来看看该如何去做监听机制

20
00:00:51,550 --> 00:00:53,170
我们打开我们之前的

21
00:00:53,170 --> 00:00:55,570
创建绘画肯定都是不变的

22
00:00:55,570 --> 00:00:56,210
是不是

23
00:00:56,210 --> 00:00:58,410
所以说我们把这个我们直接给它拿过来

24
00:00:58,410 --> 00:00:59,810
创建绘画

25
00:00:59,810 --> 00:01:01,770
当然抛出一个异常

26
00:01:01,770 --> 00:01:03,570
查开动态我们也不查开了

27
00:01:03,570 --> 00:01:04,810
在最后的时候大家注意

28
00:01:04,810 --> 00:01:06,850
你看这个worker是不是等于none

29
00:01:06,850 --> 00:01:09,050
这个none则代表的说没有监听机制

30
00:01:09,050 --> 00:01:11,050
那这个时候我们是不是需要大家注意

31
00:01:11,050 --> 00:01:12,530
我们直接来到这个里面

32
00:01:12,530 --> 00:01:13,990
我们可以看到最后一个参数

33
00:01:13,990 --> 00:01:15,030
他要的是一个什么

34
00:01:15,030 --> 00:01:16,810
他要的是一个worker

35
00:01:16,810 --> 00:01:18,570
他是一个接口是不是

36
00:01:18,570 --> 00:01:22,050
所以说我们直接我们通过又一个worker

37
00:01:22,050 --> 00:01:25,890
我们通过记名内部内的这种方式来进行编写

38
00:01:25,890 --> 00:01:28,050
我们直接在这里面我们输出一句话

39
00:01:28,050 --> 00:01:28,530
什么呢

40
00:01:28,530 --> 00:01:31,250
就是说正在监听

41
00:01:31,250 --> 00:01:34,410
就是正在监听

42
00:01:34,410 --> 00:01:35,710
< No Speech >

43
00:01:35,710 --> 00:01:36,330
Okay

44
00:01:36,330 --> 00:01:38,170
那么在实现监听

45
00:01:38,170 --> 00:01:41,810
我们老师以前一直在说这个rootk本中的监听机制啊

46
00:01:41,810 --> 00:01:42,490
它分为两种

47
00:01:42,490 --> 00:01:44,130
一种是监听目录啊

48
00:01:44,130 --> 00:01:46,290
还有一种是监听数据

49
00:01:46,290 --> 00:01:46,850
那首先呢

50
00:01:46,850 --> 00:01:49,770
我们先来看一下该如何通过监听机制

51
00:01:49,770 --> 00:01:53,330
我们该如何注册这个监听的啊

52
00:01:53,330 --> 00:01:55,690
就是监听的这个机制啊

53
00:01:55,690 --> 00:01:56,530
来干嘛呢

54
00:01:56,530 --> 00:01:59,210
监听节点注意啊

55
00:01:59,210 --> 00:02:00,730
监听的是节点

56
00:02:00,730 --> 00:02:01,890
不是数据

57
00:02:01,890 --> 00:02:03,890
那我既然说我要监听节点

58
00:02:03,890 --> 00:02:06,730
我是肯定是zk.get true

59
00:02:06,730 --> 00:02:10,370
然后里边我们是不是要写那个节点的名字啊

60
00:02:10,370 --> 00:02:11,370
比如node1

61
00:02:11,370 --> 00:02:14,330
在node1下面我们是不是有一个A节点和一个B节点啊

62
00:02:14,330 --> 00:02:16,370
这是我们在上一节课的时候创建出来的

63
00:02:16,370 --> 00:02:17,730
我们就监听这个节点

64
00:02:17,730 --> 00:02:18,250
然后呢

65
00:02:18,250 --> 00:02:18,890
在上一节课呢

66
00:02:18,890 --> 00:02:19,450
我们后边呢

67
00:02:19,450 --> 00:02:20,610
写的是一个none

68
00:02:20,610 --> 00:02:21,090
没问题吧

69
00:02:21,090 --> 00:02:22,250
我们没有那个监听机制

70
00:02:22,250 --> 00:02:22,810
是不是啊

71
00:02:22,810 --> 00:02:23,330
但是呢

72
00:02:23,330 --> 00:02:24,930
这节课我们有监听机制了

73
00:02:24,930 --> 00:02:26,370
所以说这个后边啊

74
00:02:26,370 --> 00:02:27,210
就不是none了

75
00:02:27,210 --> 00:02:28,770
变成什么变成什么呢

76
00:02:28,770 --> 00:02:30,290
我们继续new一个water

77
00:02:30,290 --> 00:02:33,650
就是具体我们还是通过匿名对不对这种方式啊

78
00:02:33,650 --> 00:02:35,250
我们继续去做

79
00:02:35,250 --> 00:02:35,810
在这块上

80
00:02:35,810 --> 00:02:41,010
他也说当这个节点下面的子节点啊出现修改的时候呢

81
00:02:41,010 --> 00:02:43,570
他会进入呢方法的一个什么呢

82
00:02:43,570 --> 00:02:46,050
就是监听的回调函数

83
00:02:46,050 --> 00:02:48,530
就会就会回到来这个方法里边啊

84
00:02:48,530 --> 00:02:49,570
他回调过来之后呢

85
00:02:49,570 --> 00:02:51,050
我们在这边

86
00:02:51,050 --> 00:02:53,010
我就开始做一些简单的操作了呀

87
00:02:53,010 --> 00:02:54,930
那比如说我们说呃

88
00:02:54,930 --> 00:02:58,010
我们的监听的监听的路径

89
00:02:58,010 --> 00:02:58,850
我想看一看

90
00:02:58,850 --> 00:03:01,970
以及我监听的类型

91
00:03:01,970 --> 00:03:03,050
我想看一看啊

92
00:03:03,050 --> 00:03:04,730
类型ok

93
00:03:04,730 --> 00:03:07,290
那今天的路径我们该如何查看呢

94
00:03:07,290 --> 00:03:09,210
我们通过这个event啊

95
00:03:09,210 --> 00:03:10,450
这个event事件

96
00:03:10,450 --> 00:03:13,090
我们之前在讲这个监听机制原理的时候

97
00:03:13,090 --> 00:03:15,210
我们说说他有通过他有这个通知事件

98
00:03:15,210 --> 00:03:17,650
是不是那我想看看他这个通知事件是什么呢

99
00:03:17,650 --> 00:03:20,890
首先第一个我先来看看他的一个监听的路径啊

100
00:03:20,890 --> 00:03:22,570
比如说你看这有个叫pass啊

101
00:03:22,570 --> 00:03:24,530
今天的路径以及啊

102
00:03:24,530 --> 00:03:27,090
他监听的事件是什么啊

103
00:03:27,090 --> 00:03:27,690
这个事件呢

104
00:03:27,690 --> 00:03:30,490
我们可以通过他得到一个叫做type

105
00:03:30,490 --> 00:03:31,650
那他监听事件是什么

106
00:03:31,650 --> 00:03:32,850
你到底是不是被修改了

107
00:03:32,850 --> 00:03:33,970
是不是其次呢

108
00:03:33,970 --> 00:03:35,090
我们最后啊

109
00:03:35,090 --> 00:03:36,730
最后我们再来一个什么呢

110
00:03:36,730 --> 00:03:39,690
我们再来一个event的点什么呢

111
00:03:39,690 --> 00:03:40,170
呃

112
00:03:40,170 --> 00:03:40,730
没有了啊

113
00:03:40,730 --> 00:03:40,970
没有了

114
00:03:40,970 --> 00:03:42,810
我们直接写一个叫做嗯

115
00:03:42,810 --> 00:03:44,610
这个路径这个数据被修改了啊

116
00:03:44,610 --> 00:03:48,490
节点被修改了啊

117
00:03:48,490 --> 00:03:49,650
节点被修改了啊

118
00:03:49,650 --> 00:03:51,570
非常的简单ok

119
00:03:51,570 --> 00:03:52,770
那我们呢来试一下

120
00:03:52,770 --> 00:03:53,690
我们来运行起来

121
00:03:53,690 --> 00:03:54,050
当然了

122
00:03:54,050 --> 00:03:55,410
我们如果直接一运行

123
00:03:55,410 --> 00:03:56,850
是不是个程序直接停掉了

124
00:03:56,850 --> 00:03:59,810
他没有达到这种监听的这种这种形式啊

125
00:03:59,810 --> 00:04:02,650
所以说我们需要通过现成的这种方式

126
00:04:02,650 --> 00:04:03,890
让他一直在睡眠啊

127
00:04:03,890 --> 00:04:05,970
让他无休止的睡眠下去

128
00:04:05,970 --> 00:04:07,610
我们通过浪类型啊

129
00:04:07,610 --> 00:04:09,770
就说这个呢是一个最大值啊

130
00:04:09,770 --> 00:04:11,530
会永久的睡眠下去啊

131
00:04:11,530 --> 00:04:12,850
我们让他永久的睡眠下去

132
00:04:12,850 --> 00:04:15,490
并且呢给我一直去监听这个节点啊

133
00:04:15,490 --> 00:04:16,370
今天这个节点ok

134
00:04:16,370 --> 00:04:18,170
我们把这个呢直接运行

135
00:04:18,170 --> 00:04:18,570
并且呢

136
00:04:18,570 --> 00:04:19,090
我们在这里啊

137
00:04:19,090 --> 00:04:20,930
我们加一个断点什么意思呢

138
00:04:20,930 --> 00:04:23,130
就是当我们的这个节点

139
00:04:23,130 --> 00:04:24,410
他发生改变的时候

140
00:04:24,410 --> 00:04:26,890
是不是会会有一个程序说毁掉回来

141
00:04:26,890 --> 00:04:28,250
这就是监听机制吗

142
00:04:28,250 --> 00:04:31,330
这个毁掉回来的这个过程是不是就是人家主keyboard毁掉过来了

143
00:04:31,330 --> 00:04:31,930
对不对

144
00:04:31,930 --> 00:04:32,610
然后你看啊

145
00:04:32,610 --> 00:04:34,050
现在是正在监听啊

146
00:04:34,050 --> 00:04:35,290
就监听这个节点

147
00:04:35,290 --> 00:04:36,930
如果这个节点发生改变啊

148
00:04:36,930 --> 00:04:38,570
他呢就会毁掉

149
00:04:38,570 --> 00:04:40,450
然后呢打开我们的这个编辑器啊

150
00:04:40,450 --> 00:04:40,890
在这块呢

151
00:04:40,890 --> 00:04:42,810
我们可以看到他有个node1

152
00:04:42,810 --> 00:04:43,210
然后呢

153
00:04:43,210 --> 00:04:45,930
我们可以看到这个node1里面有个a和b

154
00:04:45,930 --> 00:04:47,210
那这样我们delete

155
00:04:47,210 --> 00:04:50,970
我们把这个node1里边的a给他干掉

156
00:04:50,970 --> 00:04:52,170
大家注意你看干掉以后

157
00:04:52,170 --> 00:04:56,730
你看我们的这个编辑器里边是马上就毁掉过来一个东西

158
00:04:56,730 --> 00:04:57,290
是不是啊

159
00:04:57,290 --> 00:04:57,610
然后呢

160
00:04:57,610 --> 00:04:59,290
我们继续走走走

161
00:04:59,290 --> 00:04:59,810
大家注意啊

162
00:04:59,810 --> 00:05:01,050
你看这里的这个输出打印

163
00:05:01,050 --> 00:05:02,410
你看节点被修改了

164
00:05:02,410 --> 00:05:04,530
你看这个节点的这个节点被修改了

165
00:05:04,530 --> 00:05:07,050
你看马上是个通知我们这个客户端了吧

166
00:05:07,050 --> 00:05:09,010
这就是主keyboard的监听机制

167
00:05:09,010 --> 00:05:09,330
当然了

168
00:05:09,330 --> 00:05:12,330
我们现在实现的是针对节点的监听

169
00:05:12,330 --> 00:05:13,090
是不是啊

170
00:05:13,090 --> 00:05:14,050
针对节点的监听

171
00:05:14,050 --> 00:05:15,410
OK我们继续啊

172
00:05:15,410 --> 00:05:17,050
我们不仅是针对于节点

173
00:05:17,050 --> 00:05:17,610
我们可以监听

174
00:05:17,610 --> 00:05:20,970
我们还可以针对于数据来进行监听啊

175
00:05:20,970 --> 00:05:23,742
我们来监听节点数据吧

176
00:05:24,506 --> 00:05:25,546
监听数据

177
00:05:25,546 --> 00:05:29,226
那监听数据呢我们通过zk.getData

178
00:05:29,226 --> 00:05:33,066
通过getData来监听这个数据

179
00:05:33,066 --> 00:05:34,146
我们呢监听什么呢

180
00:05:34,146 --> 00:05:37,546
就还是监听比如说我们再来一个吧

181
00:05:37,546 --> 00:05:38,706
比如说root吧

182
00:05:38,706 --> 00:05:40,386
我们再来一个比如说root

183
00:05:41,146 --> 00:05:44,586
然后呢在这块呢我们再来一个取个名吧

184
00:05:44,906 --> 00:05:47,706
取个名我们叫new一个water

185
00:05:47,706 --> 00:05:48,466
没问题吧

186
00:05:48,466 --> 00:05:49,986
那这个时候大家注意

187
00:05:49,986 --> 00:05:51,666
这个时候我们是不是又干嘛呢

188
00:05:51,666 --> 00:05:53,186
又创建了一个water是不是

189
00:05:53,186 --> 00:05:55,306
并且呢还是通过niblet这种方式

190
00:05:55,306 --> 00:05:57,226
为啥呢为啥报错了呢

191
00:05:57,226 --> 00:05:58,866
还有一个只能是吧

192
00:05:58,866 --> 00:06:00,906
最后我们再来一个呢

193
00:06:01,818 --> 00:06:04,058
最后写一个null,搞定了

194
00:06:04,058 --> 00:06:07,498
当我们这个数据发生修改的时候

195
00:06:07,498 --> 00:06:09,658
那你说这个是不是会毁掉回来

196
00:06:09,658 --> 00:06:12,058
是不是啊,它是不是会毁掉

197
00:06:12,058 --> 00:06:13,338
会毁掉,ok

198
00:06:13,338 --> 00:06:14,938
那我要监听这个root

199
00:06:14,938 --> 00:06:16,698
当然我们这个数据里面还没有这个root

200
00:06:16,698 --> 00:06:18,298
我们可以create给它创建一个

201
00:06:18,298 --> 00:06:20,378
斜杠root里边放一个百战

202
00:06:20,378 --> 00:06:21,458
没问题吧

203
00:06:21,458 --> 00:06:23,178
那我这个root这个节点是不是就存在了

204
00:06:23,178 --> 00:06:25,658
然后在这个里边我们还是老样子

205
00:06:25,658 --> 00:06:27,818
就当这个数据它发生修改的时候

206
00:06:27,818 --> 00:06:30,338
我们继续你帮我打印一下

207
00:06:30,338 --> 00:06:32,698
它到底是监听的,一是监听的是谁

208
00:06:32,698 --> 00:06:34,538
二是它这个类型是什么

209
00:06:34,538 --> 00:06:35,818
监听的是啥呀

210
00:06:35,818 --> 00:06:37,258
来看一看呗

211
00:06:37,258 --> 00:06:39,178
那就当我们这个数据被修改的时候

212
00:06:39,178 --> 00:06:41,418
我是不是可以看到一些具体的一些效果了

213
00:06:41,418 --> 00:06:41,898
是不是啊

214
00:06:41,898 --> 00:06:43,538
然后呢我们继续走你啊

215
00:06:43,538 --> 00:06:45,258
然后呢我们还是通过这种方式

216
00:06:45,258 --> 00:06:46,258
我们可以监听数据

217
00:06:46,258 --> 00:06:47,498
但是大家注意

218
00:06:47,498 --> 00:06:48,778
在我们的root keyboard

219
00:06:48,778 --> 00:06:51,578
我们通过这个原生API去实现的话

220
00:06:51,578 --> 00:06:54,178
这个监听机制只有一次

221
00:06:54,178 --> 00:06:54,978
哎,明白没有

222
00:06:54,978 --> 00:06:57,338
就是它只能被监听一次

223
00:06:57,338 --> 00:06:58,978
那如果说你想多种监听

224
00:06:58,978 --> 00:07:00,538
你还得再重新注册啊

225
00:07:00,538 --> 00:07:02,258
这就是它的一个坏处啊

226
00:07:02,258 --> 00:07:03,818
然后呢我们再来运行

227
00:07:03,818 --> 00:07:05,218
那这个时候它监听的是什么呢

228
00:07:05,218 --> 00:07:06,858
就是root这个节点

229
00:07:06,858 --> 00:07:08,778
就当root这个节点发生改变的时候

230
00:07:08,778 --> 00:07:09,898
马上就会回电回来

231
00:07:09,898 --> 00:07:10,698
我们来试一下

232
00:07:10,698 --> 00:07:11,858
我们给这个root呢

233
00:07:11,858 --> 00:07:13,018
我们set一个值啊

234
00:07:13,018 --> 00:07:13,938
比如说root

235
00:07:13,938 --> 00:07:15,458
比如说再来个IT板站

236
00:07:15,458 --> 00:07:16,458
之前是板站嘛

237
00:07:16,458 --> 00:07:17,618
改成了IT板站

238
00:07:17,618 --> 00:07:19,938
我们会发现你看这里是马上又回电回来了

239
00:07:19,938 --> 00:07:20,978
这就是我们root keyboard

240
00:07:20,978 --> 00:07:22,298
给我们通知回来的东西

241
00:07:22,298 --> 00:07:22,978
正在监听嘛

242
00:07:22,978 --> 00:07:24,138
然后走你走你

243
00:07:24,138 --> 00:07:25,138
大家注意你看

244
00:07:25,138 --> 00:07:26,458
这个你看这个节点是不是

245
00:07:26,458 --> 00:07:27,258
你看

246
00:07:27,258 --> 00:07:28,698
node data发生了称职

247
00:07:28,698 --> 00:07:31,218
我们刚刚是不是node chosen发生了一个称职

248
00:07:31,218 --> 00:07:32,338
是吧发生一个改变

249
00:07:32,338 --> 00:07:35,418
这次是不是我们的这个数据发生了一个改变

250
00:07:35,418 --> 00:07:35,978
没问题吧

251
00:07:35,978 --> 00:07:37,058
然后呢我们继续你看

252
00:07:37,058 --> 00:07:38,818
节点啊这个节点被修改了

253
00:07:38,818 --> 00:07:39,738
不是节点被修改了

254
00:07:39,738 --> 00:07:41,258
其实我们这没改是吧

255
00:07:41,258 --> 00:07:44,218
啊这个应该是节点的数据被修改了

256
00:07:44,218 --> 00:07:45,538
那这个时候呢我是不是又知道了

257
00:07:45,538 --> 00:07:46,498
哦原来被修改了

258
00:07:46,498 --> 00:07:48,258
我需要重新获取节点的数据

259
00:07:48,258 --> 00:07:51,178
比如说你要做一些数据库切换的这种操作的话

260
00:07:51,178 --> 00:07:52,618
我是不是得赶紧把这个值取出来

261
00:07:52,618 --> 00:07:53,738
是不是要切换一下啊

262
00:07:53,738 --> 00:07:56,058
这就是我们的监听的机制啊

263
00:07:56,058 --> 00:07:56,898
还是比较简单

264
00:07:56,898 --> 00:08:00,258
但是有一个问题需要小伙伴记住就是你这个监听机制

265
00:08:00,258 --> 00:08:01,538
你看比如说我们监听机制

266
00:08:01,538 --> 00:08:03,978
它只能什么的只能被监听一次

267
00:08:03,978 --> 00:08:04,538
什么意思呢

268
00:08:04,538 --> 00:08:05,898
我们来运永久运行一下

269
00:08:05,898 --> 00:08:06,978
< No Speech >

270
00:08:06,978 --> 00:08:07,858
永久运行一下

271
00:08:07,858 --> 00:08:08,858
那我们在运行的时候呢

272
00:08:08,858 --> 00:08:10,098
这个root是不是又被监听了呀

273
00:08:10,098 --> 00:08:10,658
来注意啊

274
00:08:10,658 --> 00:08:13,138
你看当我们在set这个root的时候

275
00:08:13,138 --> 00:08:15,578
比如说我们又给它改成了百战啊

276
00:08:15,578 --> 00:08:16,298
那改成了百战

277
00:08:16,298 --> 00:08:18,578
大家注意看正在监听root

278
00:08:18,578 --> 00:08:20,058
然后看是不是打印了这句话了

279
00:08:20,058 --> 00:08:21,258
说明我们被监听到了

280
00:08:21,258 --> 00:08:21,698
但是呢

281
00:08:21,698 --> 00:08:24,098
当我们再次去修改这个root的时候

282
00:08:24,098 --> 00:08:27,658
比如说我又给它改成改成这个it百战啊

283
00:08:27,658 --> 00:08:29,258
大家注意你看这边有反应吗

284
00:08:29,258 --> 00:08:29,738
没有了

285
00:08:29,738 --> 00:08:30,338
为什么呢

286
00:08:30,338 --> 00:08:34,058
因为在用我们原生的API中这个监听机制啊

287
00:08:34,058 --> 00:08:35,458
它只有一次记住啊

288
00:08:35,458 --> 00:08:36,618
它只有一次

289
00:08:36,618 --> 00:08:37,938
那如果说你想再纯洁点

290
00:08:37,938 --> 00:08:39,098
你还得再继续干嘛呢

291
00:08:39,098 --> 00:08:41,378
再去在这里面再选监听的这个东西啊

292
00:08:41,378 --> 00:08:42,258
OK

293
00:08:42,258 --> 00:08:42,938
我们到这呢

294
00:08:42,938 --> 00:08:44,778
我们这节课的这个监听机制啊

295
00:08:44,778 --> 00:08:46,858
到这就全都讲完了啊

296
00:08:46,858 --> 00:08:48,190
谢谢大家

