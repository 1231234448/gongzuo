1
00:00:00,986 --> 00:00:04,734
这节课我们再来讲解一下MySQL数据库当中的

2
00:00:04,734 --> 00:00:05,786
 REMOVE

3
00:00:05,786 --> 00:00:09,986
MySQL 数据库一共为我们提供了五种数据类型

4
00:00:09,986 --> 00:00:10,718
分别是

5
00:00:10,718 --> 00:00:13,786
整数类型，浮点数类型，字符类型

6
00:00:13,786 --> 00:00:18,186
日期类型、二进制类型,用于存储不同类型的数据

7
00:00:18,186 --> 00:00:20,986
我们先来看一下整数类型

8
00:00:20,986 --> 00:00:24,386
在MySQL当中,整数类型一共有5种

9
00:00:24,386 --> 00:00:25,054
分别是

10
00:00:25,054 --> 00:00:29,306
tinyint，smallint ，mediumint ，int 以及bigint

11
00:00:29,306 --> 00:00:31,986
那么这五种类型它最大的区别就是

12
00:00:31,986 --> 00:00:35,826
占用字节数以及取值范围是有区别的

13
00:00:35,826 --> 00:00:37,226
它分别是由小到大的

14
00:00:37,226 --> 00:00:40,586
bigint占用字节数最少,它的取值范围也最小

15
00:00:40,586 --> 00:00:45,506
bigint它是占用字节数最大,同时它的取值范围也最大

16
00:00:45,506 --> 00:00:49,826
那么在这五种整数类型当中,我们用的最多的其实就是两种

17
00:00:49,826 --> 00:00:50,302
一个是tinyint,一个是int,

18
00:00:50,302 --> 00:00:52,346


19
00:00:52,346 --> 00:00:55,306
那么我们什么情况下会用到tinyint呢?

20
00:00:55,306 --> 00:00:59,746
tinyint它只占用一个字节,而且它的取值范围比较小

21
00:00:59,746 --> 00:01:05,266
比如说我们在描述一个数据的性别时,在存储一个数据的性别的时候

22
00:01:05,266 --> 00:01:09,306
性别我们除了可以用男女来存储以外,来表示以外

23
00:01:09,306 --> 00:01:11,866
也可以用0和1来表示性别

24
00:01:11,866 --> 00:01:14,826
那么如果现在我们用0和1来表示性别

25
00:01:14,826 --> 00:01:19,226
那么这个时候对于性别列我们就可以用tinyint类型来定义

26
00:01:19,226 --> 00:01:20,350
因为它的值是除了0就是1

27
00:01:20,350 --> 00:01:21,722


28
00:01:21,722 --> 00:01:23,358
它的位数是一位的

29
00:01:24,058 --> 00:01:25,538
不会有这个位数的变化的

30
00:01:25,538 --> 00:01:26,138
明白这意思吧

31
00:01:26,138 --> 00:01:27,230
这是性别

32
00:01:28,058 --> 00:01:30,590
那么还有一种情况,比如说我数据当中

33
00:01:30,590 --> 00:01:31,834
有状态

34
00:01:31,834 --> 00:01:36,314
表示数据的状态,状态一般也是0或者1来表示

35
00:01:36,314 --> 00:01:40,274
那么对于这种状态的字段,我们也可以使用tinyint表示

36
00:01:40,274 --> 00:01:43,838
因为状态它的值也不会有长度的变化,除了0就是1

37
00:01:43,838 --> 00:01:45,946


38
00:01:45,946 --> 00:01:49,166
那么什么情况下会用到int类型呢?

39
00:01:49,166 --> 00:01:50,622
就是当你的这个

40
00:01:51,258 --> 00:01:54,178
数值的长度会有变化的时候

41
00:01:54,178 --> 00:01:56,318
比如说我要存这个人的序号

42
00:01:56,826 --> 00:02:01,386
序号会随着数据量越大,它的序号的长度也会变得越大

43
00:02:01,386 --> 00:02:04,306
那么这个时候我们就要用int类型来存储了

44
00:02:04,306 --> 00:02:08,866
明白这意思吧?int它占用四个字节,它的取值范围比较大的

45
00:02:08,866 --> 00:02:11,134
因为我们这个数据量越多,他的这个

46
00:02:11,930 --> 00:02:16,730
序号的长度也会越大,所以用int类型是可以存得下的

47
00:02:16,730 --> 00:02:18,170


48
00:02:18,170 --> 00:02:23,090
那我们看一下在这些整数类型后面我们还可以给定一个括号

49
00:02:23,090 --> 00:02:26,366
括号里给定一个m 那么这个m指的是什么呢?我们来看一下

50
00:02:27,354 --> 00:02:33,954
数值类型中的长度m是指显示长度,并不是表示存储长度

51
00:02:33,954 --> 00:02:40,674
这个同学们一定要注意,整数类型中的括号m指的是显示长度

52
00:02:40,674 --> 00:02:42,994
而不是存储长度

53
00:02:42,994 --> 00:02:48,734
那么这个显示长度只有为字段设置了zerofill的时候才有用

54
00:02:49,306 --> 00:02:52,346
不是说你指定了显示长度,显示长度就生效了

55
00:02:52,346 --> 00:02:56,478
不是这样的,你要为这个字段设置成zerofill才会生效

56
00:02:56,478 --> 00:02:59,706
例如 int(3)则表示

57
00:02:59,706 --> 00:03:06,066
如果实际值是2,如果列指定了zerofill,查询结果就是002

58
00:03:06,066 --> 00:03:12,826
因为你已经指定长度为3了,那么你在查询数据时,它就会用0来作为一个长度的填充

59
00:03:12,826 --> 00:03:15,870
保证每次查询结果都是以3位的形式来填充

60
00:03:16,474 --> 00:03:17,954
不够的用0来补齐

61
00:03:17,954 --> 00:03:18,674
明白这意思吧

62
00:03:18,674 --> 00:03:20,674
那么在这个整形当中

63
00:03:20,674 --> 00:03:22,914
这个显示长度不是必须要设定的

64
00:03:22,914 --> 00:03:25,274
我们一般在使用这个整形类型的时候

65
00:03:25,274 --> 00:03:27,006
也不会去设置它的显示长度

66
00:03:27,006 --> 00:03:29,530
明白这意思吧

67
00:03:29,530 --> 00:03:33,490
这是整数类型 那么我们再来看一下浮点类型

68
00:03:33,490 --> 00:03:38,526
在MySQL数据库当中为我们准备了两种浮点类型 分别是float和double

69
00:03:39,226 --> 00:03:41,946
表示单进度跟双进度

70
00:03:41,946 --> 00:03:46,066
这个和我们Java当中的float跟double表示的含义是一样的

71
00:03:46,066 --> 00:03:47,826
那这里同学们需要注意

72
00:03:47,826 --> 00:03:50,346
我们在使用MySQL的浮点类型时

73
00:03:50,346 --> 00:03:52,186
无论是float还是double

74
00:03:52,186 --> 00:03:55,906
在指定浮点类型时必须要给定括号

75
00:03:55,906 --> 00:03:58,494
而且括号里要给定两个参数,分别是m和d

76
00:03:59,450 --> 00:04:06,366
那么这个m跟d表示什么含义呢?m是总个数,d是小数

77
00:04:06,366 --> 00:04:08,794
位数，大家注意啊

78
00:04:08,794 --> 00:04:11,994
m是总位数,d是小数位数 什么意思呢?

79
00:04:11,994 --> 00:04:12,542
比如说,

80
00:04:13,210 --> 00:04:19,850
我m给的是5,d给的是2,那么这表示小数点后面保留2位

81
00:04:19,850 --> 00:04:22,910
那么整数部位是几呢?整数部位就是3

82
00:04:22,910 --> 00:04:25,402
因为你给的m是5吗

83
00:04:25,402 --> 00:04:27,202
表的是的总个数

84
00:04:27,202 --> 00:04:28,082
明白这意思吧

85
00:04:28,082 --> 00:04:31,002
大家不要认为这个m是整数位,d是小数位

86
00:04:31,002 --> 00:04:35,002
不是的,m是总位数,d是小数点的位数

87
00:04:35,002 --> 00:04:37,310
把小数点位数去掉,剩下的就是整位数

88
00:04:37,818 --> 00:04:38,818
明白这意思吧?

89
00:04:38,818 --> 00:04:39,902
这是浮点类型。

90
00:04:40,858 --> 00:04:45,018
好,我们再来看一下MySQL当中为我们准备的字符类型

91
00:04:45,018 --> 00:04:49,818
在MySQL当中一共提供了6种类型来表示字符类型

92
00:04:49,818 --> 00:04:50,462
分别是

93
00:04:50,462 --> 00:04:52,730
char然后tinytext，然后

94
00:04:52,730 --> 00:04:54,730
varchar,test以及mediumtext，还有longtext

95
00:04:54,730 --> 00:04:58,330


96
00:04:58,330 --> 00:05:02,350
在这些字符类型当中,我们用的最多的就是三种

97
00:05:02,350 --> 00:05:06,330
一个是char，一个是varchar，一个是text

98
00:05:06,330 --> 00:05:09,930
这里我们先来看一下char类型,同学们这里需要注意啊

99
00:05:09,930 --> 00:05:16,766
char和varchar类型在使用时,必须要给定括号,并且指定一个n

100
00:05:17,402 --> 00:05:19,358
这个跟整数是不一样的

101
00:05:20,186 --> 00:05:24,666
char当中的括号n和varchar当中的括号n表示什么意思呢?

102
00:05:24,666 --> 00:05:27,586
我们先来看,char它表示固定长度

103
00:05:27,586 --> 00:05:28,894
它括号的n是你当前字符的总长度。

104
00:05:28,894 --> 00:05:35,610


105
00:05:35,610 --> 00:05:37,610
字符的总长度

106
00:05:37,610 --> 00:05:38,366
也就是说你现在

107
00:05:38,366 --> 00:05:43,642
char给的n是一个5

108
00:05:43,642 --> 00:05:49,242
当你存一个字符的时候,注意这个n无论是char还是varchar指的都是字符长度

109
00:05:49,242 --> 00:05:55,162
你给的一个5,那么它会用空格去做前四个字符的一个补齐

110
00:05:55,162 --> 00:06:00,382
也就是它会指定char存储的内容固定长度必须是5的长度

111
00:06:00,382 --> 00:06:02,266


112
00:06:02,266 --> 00:06:05,786
明白这意思吧?长度必须是5 ，不够的 用空格来补齐

113
00:06:05,786 --> 00:06:08,026
这是char的一个特点 因为它是固定长度

114
00:06:08,026 --> 00:06:11,998
而varchar的N表示仍然是字符的最大的长度

115
00:06:12,666 --> 00:06:16,158
但是长度不够时,它不会用空格去补齐

116
00:06:16,158 --> 00:06:18,202


117
00:06:18,202 --> 00:06:22,602
是一个a,那它就纯一个a,不会用四个空格去补齐,明白吧

118
00:06:22,602 --> 00:06:23,934
所以varchar是一个可变长度。

119
00:06:23,934 --> 00:06:26,394


120
00:06:26,394 --> 00:06:29,674
那么在使用char跟varchar的时候我说了,必须要指定长度

121
00:06:29,674 --> 00:06:31,582
而test则不需要指定长度

122
00:06:31,582 --> 00:06:34,266
明白这意思吧

123
00:06:34,266 --> 00:06:41,746
好我们来看一下 char和varchar的区别,char长度是固定的,即每条数据占用等长的字节空间

124
00:06:41,746 --> 00:06:44,478
适合用在身份证号码、手机号码等定长的内容

125
00:06:45,306 --> 00:06:47,326
比如说现在我存数据时

126
00:06:48,282 --> 00:06:54,962
这个数据它的性别我就要用男和女或者是f跟m male跟female来存储的时候

127
00:06:54,962 --> 00:06:56,766
那么这个时候我们就可以用char来存储

128
00:06:56,766 --> 00:06:58,138
应为

129
00:06:58,138 --> 00:07:02,738
你的长度是固定的,不是男就是女,不是F就是M

130
00:07:02,738 --> 00:07:04,338
对不对,这是一种情况

131
00:07:04,338 --> 00:07:08,138
还有,比如说我在存储这个人的身份证号码和手机号码的时候

132
00:07:08,138 --> 00:07:10,654
我们知道手机号码和身份证号码的长度是不一样的

133
00:07:11,322 --> 00:07:13,322
只是里面的内容会变化,对不对?

134
00:07:13,322 --> 00:07:14,782
那么这个时候也可以用。

135
00:07:15,386 --> 00:07:17,386
char来作为存储类型

136
00:07:18,170 --> 00:07:20,170
我们再来看varchar

137
00:07:20,170 --> 00:07:22,170
varchar表示可变长度

138
00:07:22,170 --> 00:07:26,010
它是可以设置最大长度的 适用于长度可变的属性

139
00:07:26,010 --> 00:07:28,010
那么什么情况下会用到varchar呢

140
00:07:28,010 --> 00:07:30,410
比如说我在存储这个人的姓名的时候

141
00:07:30,410 --> 00:07:33,598
这个人的姓名的长度是不固定的

142
00:07:34,234 --> 00:07:35,834
是吧有两位的，有三位的

143
00:07:36,762 --> 00:07:41,482
甚至还有四位的 比如说这个人的姓名是复姓 那有可能是四位的

144
00:07:41,482 --> 00:07:46,878
所以这个时候对于姓名我们可以用varchar来表示 明白这意思吧?

145
00:07:46,878 --> 00:07:47,930


146
00:07:47,930 --> 00:07:50,730
Test在使用的时候是不需要设置长度的

147
00:07:50,730 --> 00:07:53,250
它不像char跟varchar必须要设置长度

148
00:07:53,250 --> 00:07:55,210
而Test是不需要设置长度的

149
00:07:55,210 --> 00:07:56,930
那么什么时候用Test呢

150
00:07:56,930 --> 00:08:00,610
就是当不知道属性的最大长度时适合用Test

151
00:08:00,610 --> 00:08:02,610
比如说对于这个人的描述

152
00:08:02,610 --> 00:08:04,530
这个人的描述或者这个人的简介

153
00:08:04,530 --> 00:08:06,130
它的内容可能会非常多

154
00:08:06,130 --> 00:08:08,062
那么这个时候我们可以考虑用Test

155
00:08:08,062 --> 00:08:09,210
明白这意思吧

156
00:08:09,210 --> 00:08:13,050
那么按照查询速度来看,char的查询速度是最快的

157
00:08:13,050 --> 00:08:16,690
为什么?因为它是固定长度的,它是定长的,它的查询最快

158
00:08:16,690 --> 00:08:19,326
其次是varchar,最后是test

159
00:08:19,326 --> 00:08:21,370
test是最慢的

160
00:08:21,370 --> 00:08:24,570
我们再来看一下字符串的使用建议

161
00:08:24,570 --> 00:08:28,290
经常变化的用varchar,知道固定长度的用char

162
00:08:28,290 --> 00:08:30,650
那么我们尽量用varchar

163
00:08:30,650 --> 00:08:35,330
超过255个字符的时候只能用varchar或test

164
00:08:35,330 --> 00:08:37,694
能用varchar的地方不用test

165
00:08:37,694 --> 00:08:39,290


166
00:08:39,290 --> 00:08:40,638
这是字符串的使用建议

167
00:08:41,306 --> 00:08:44,666
好,我们再来看一下日期类型

168
00:08:44,666 --> 00:08:49,534
在mySQL当中为我们准备了4种类型来定义日期的存储

169
00:08:49,534 --> 00:08:50,938
首先那

170
00:08:50,938 --> 00:08:52,818
data是只存储年月日

171
00:08:52,818 --> 00:08:53,858
然后是time

172
00:08:53,858 --> 00:08:56,178
time是存储小时分钟秒

173
00:08:56,178 --> 00:08:57,538
还有一个是datatime

174
00:08:57,538 --> 00:09:01,138
datatime是既存储年月日也存储小时分钟秒

175
00:09:01,138 --> 00:09:03,006
还有一个timestamp时间戳

176
00:09:03,898 --> 00:09:07,418
那么时间戳当中存储的也是年日

177
00:09:07,418 --> 00:09:08,730
和小时分钟秒

178
00:09:08,730 --> 00:09:14,810
那么跟datetime有什么区别呢?时间戳在存储日期时,它是不考虑时区的

179
00:09:14,810 --> 00:09:20,010
它是按照1970年,格林尼茨天文台1970年

180
00:09:20,010 --> 00:09:21,050


181
00:09:21,050 --> 00:09:26,170
0时0分0秒这样的一个标准日期格式来做时间存储的

182
00:09:26,170 --> 00:09:28,030
那么如果我们在做

183
00:09:28,922 --> 00:09:33,602
timestamp日期时你要考虑到时区的处理的问题

184
00:09:33,602 --> 00:09:34,802
明白这意思吧

185
00:09:34,802 --> 00:09:38,322
那么我们到底应该如何选择日期类型呢

186
00:09:38,322 --> 00:09:40,642
如果你的项目当中只存年月日

187
00:09:40,642 --> 00:09:40,990
那首选

188
00:09:40,990 --> 00:09:42,682
data就可以了

189
00:09:42,682 --> 00:09:46,042
如果只存储小时分钟秒,首选time就可以了

190
00:09:46,042 --> 00:09:50,362
如果你既存储年日,又存储小时分钟秒,那datetime就可以了

191
00:09:50,362 --> 00:09:54,910
如果你们项目是跨时区的,那你肯定要选择DataTime

192
00:09:54,910 --> 00:09:56,282


193
00:09:56,282 --> 00:10:01,002
因为timestamp是不支持跨时区的,它没有时区处理

194
00:10:01,002 --> 00:10:04,318
而datetime这个时间戳是支持时区处理的

195
00:10:04,318 --> 00:10:07,002


196
00:10:07,002 --> 00:10:12,002
好,我们再来看一下二进制数据类型BLOB

197
00:10:12,002 --> 00:10:14,762
这个Bilob是三个单词的简写

198
00:10:14,762 --> 00:10:15,422
分别是

199
00:10:15,422 --> 00:10:18,234
 binary large object

200
00:10:18,234 --> 00:10:20,794
表示的是字节大对象

201
00:10:20,794 --> 00:10:22,634
那什么叫字节大对象呢?

202
00:10:22,634 --> 00:10:27,234
比如说现在我要在MySQL数据库中存储图片影音

203
00:10:27,234 --> 00:10:29,370
这样的文件

204
00:10:29,370 --> 00:10:31,050
它是二进制文件,对吧

205
00:10:31,050 --> 00:10:36,610
那么我们就得用二进制数据类型来存储这样的内容了

206
00:10:36,610 --> 00:10:39,210
或者是一些大的文本型数据

207
00:10:39,210 --> 00:10:42,530
它的内容比较多,已经超过了最大文本取值范围了

208
00:10:42,530 --> 00:10:45,370
那么这个时候我们也可以用二进制来存储

209
00:10:45,370 --> 00:10:49,610
二进制数据类型最大的特点就是基于字节类型来存储数据

210
00:10:49,610 --> 00:10:50,850
明白这意思吧

211
00:10:50,850 --> 00:10:52,890
BLOB跟Test的存储方式不同

212
00:10:52,890 --> 00:10:55,130
Test是以文本的方式存储

213
00:10:55,130 --> 00:10:56,770
英文存储区分大小写

214
00:10:56,770 --> 00:11:00,610
而BLOB是以二进制方式存储,以字节方式存储

215
00:11:00,610 --> 00:11:02,930
它是不区分什么大小写的了,对不对

216
00:11:02,930 --> 00:11:05,930
然后BLOB存储的数据只能整体读出

217
00:11:05,930 --> 00:11:07,650
Test可以设置字符集

218
00:11:07,650 --> 00:11:10,650
因为Test是基于字符类型来存储的

219
00:11:10,650 --> 00:11:13,662
而BLOB是不能指定字符集,因为它是基于字节类型存储的

220
00:11:13,662 --> 00:11:16,698
明白这意思吧

221
00:11:16,698 --> 00:11:20,058
好同学们我们再来看一下这节课的实时效果反馈

222
00:11:20,058 --> 00:11:25,538
第一题 数值类型就是我们的整数类型当中的int(m)

223
00:11:25,538 --> 00:11:30,526
其中m是指的是什么?然后只有字段指定 zerofill 时有用。

224
00:11:30,526 --> 00:11:32,378

A 存储长度
225
00:11:32,378 --> 00:11:33,738
B 显示长度

226
00:11:33,738 --> 00:11:34,174
C 固定长度

227
00:11:34,174 --> 00:11:36,474
D 可变长度

228
00:11:36,474 --> 00:11:42,078
那么大家考虑一下这个m指的应该是什么呢?很显然答案是B,是显示长度

229
00:11:43,066 --> 00:11:52,094
OK 我们再来看第二题 浮点类型中的double(m,d)其中  其中M指的是什么呢?

230
00:11:53,050 --> 00:11:58,974
m 指的是整数长度,m 指的是小数长度,m指的是这个c指的是总长度

231
00:11:59,706 --> 00:12:02,718
d 指的整数最大值 那么应该是哪个数字呢

232
00:12:03,642 --> 00:12:07,802
很显然是C 是吧 M表示的是总长度

233
00:12:07,802 --> 00:12:09,150
我们来看一下答案

234
00:12:10,010 --> 00:12:12,730
第一题的答案是B,显示长度

235
00:12:12,730 --> 00:12:14,206
第二题的答案是C,显示总长度

236
00:12:14,206 --> 00:12:15,450


237
00:12:15,450 --> 00:12:19,806
好同学们,那么以上我们就讲解了MySQL数据库当中所提供的数据

238
00:12:19,806 --> 00:12:21,338


239
00:12:21,338 --> 00:12:22,846
好,那我们这节课就到这里

