1
00:00:00,186 --> 00:00:01,546
Hello小伙伴大家好

2
00:00:01,786 --> 00:00:02,986
这节课我们来学习

3
00:00:02,986 --> 00:00:05,146
Rookieper里边非常重要的一个机制

4
00:00:05,306 --> 00:00:07,026
就是监听的机制

5
00:00:07,026 --> 00:00:09,186
老师之前在课程中一直在提

6
00:00:09,186 --> 00:00:10,186
什么是Rookieper

7
00:00:10,186 --> 00:00:13,054
Rookieper老师文件系统加什么呢

8
00:00:13,054 --> 00:00:14,106
< No Speech >

9
00:00:14,106 --> 00:00:16,826
这节课我们来看看什么是监听机制

10
00:00:16,826 --> 00:00:19,786
首先这个Rookieboard它提供了一个叫做

11
00:00:19,786 --> 00:00:23,070
分布式的数据发布和订阅的功能

12
00:00:23,070 --> 00:00:24,250
< No Speech >

13
00:00:24,250 --> 00:00:26,890
监听机制有的小伙伴就蒙了

14
00:00:26,890 --> 00:00:27,678
那什么叫

15
00:00:28,634 --> 00:00:30,114
我们来打一个比方

16
00:00:30,114 --> 00:00:32,074
比如说我们有这样的一个需求

17
00:00:32,074 --> 00:00:33,354
我们有一个应用

18
00:00:33,354 --> 00:00:34,954
应用A应用B应用C

19
00:00:34,954 --> 00:00:36,594
它是一个分布式架构

20
00:00:36,594 --> 00:00:38,314
当然在单体架构里边

21
00:00:38,314 --> 00:00:39,714
肯定就不存在这个业务了

22
00:00:39,714 --> 00:00:41,914
当然是在分布式架构里边

23
00:00:41,914 --> 00:00:44,714
比如说我们的应用A应用B和应用C

24
00:00:44,714 --> 00:00:46,914
它都需要连接这个数据库

25
00:00:46,914 --> 00:00:48,354
那这个时候你会怎么做

26
00:00:48,354 --> 00:00:51,314
你们可能会通过一个叫做GDPC的一个技术

27
00:00:51,314 --> 00:00:53,394
是不是会去连接这个数据库

28
00:00:53,394 --> 00:00:55,514
然后在这个里边用GDPC技术

29
00:00:55,514 --> 00:00:56,794
在这个里边用GDPC技术

30
00:00:56,794 --> 00:00:58,274
在这个里边用GDPC技术

31
00:00:58,274 --> 00:01:00,354
然后你是不是编起了一个配置文件

32
00:01:00,354 --> 00:01:01,194
在配置文件里边

33
00:01:01,194 --> 00:01:02,314
你要配置什么

34
00:01:02,314 --> 00:01:04,634
MySQL数据库的一个IP地址

35
00:01:04,634 --> 00:01:06,674
比如说ULU名和密码

36
00:01:06,674 --> 00:01:07,274
是不是

37
00:01:07,274 --> 00:01:09,954
但是这个你是不是要在每个应用里边

38
00:01:09,954 --> 00:01:10,914
是不是都写一个

39
00:01:11,354 --> 00:01:12,234
都写一遍

40
00:01:12,234 --> 00:01:13,754
这个时候你们的所有的应用

41
00:01:13,754 --> 00:01:14,954
都可以连到这个数据库了

42
00:01:14,954 --> 00:01:15,594
没有问题

43
00:01:15,594 --> 00:01:17,794
但是有一个但是

44
00:01:17,794 --> 00:01:19,594
比如说我们这个数据库它当机了

45
00:01:19,594 --> 00:01:20,354
不能用了

46
00:01:20,354 --> 00:01:22,914
这个时候你是不是要切换到这个数据库中

47
00:01:22,914 --> 00:01:24,354
它是一个备用数据库

48
00:01:24,354 --> 00:01:26,554
你叫什么叫102

49
00:01:26,554 --> 00:01:28,834
但是这个时候你会怎么去做

50
00:01:28,874 --> 00:01:31,954
你是不是要把应用A应用B应用C

51
00:01:31,954 --> 00:01:33,514
这个应用给它stop

52
00:01:33,514 --> 00:01:34,434
给它停掉

53
00:01:34,434 --> 00:01:34,994
停掉之后

54
00:01:35,314 --> 00:01:37,834
拿到应用的一个源代码之后

55
00:01:37,994 --> 00:01:39,714
把GDPC的配置

56
00:01:39,714 --> 00:01:41,234
是不是改了以后

57
00:01:41,234 --> 00:01:43,514
再把这个项目重新编译

58
00:01:43,514 --> 00:01:44,914
然后再发布

59
00:01:44,914 --> 00:01:45,994
麻不麻烦

60
00:01:45,994 --> 00:01:46,914
特别的麻烦

61
00:01:47,114 --> 00:01:48,474
我们有了监听机制

62
00:01:48,594 --> 00:01:51,394
我们就可以非常方便的实现这样的一个功能

63
00:01:51,394 --> 00:01:52,154
怎么去实现

64
00:01:52,154 --> 00:01:56,674
我们把我们的数据库的一些信息

65
00:01:56,834 --> 00:02:00,354
我们直接写在RuKeypr里边

66
00:02:00,554 --> 00:02:02,434
既然说我们RuKeypr它是一个文件系统

67
00:02:02,914 --> 00:02:04,874
我是不是能在RuKeypr里边创建一个节点

68
00:02:04,874 --> 00:02:06,954
叫做mySQL DB这个节点

69
00:02:06,954 --> 00:02:08,354
里边是一个IP地址

70
00:02:09,314 --> 00:02:10,954
我们应用A应用B应用C

71
00:02:10,954 --> 00:02:11,874
你在启动的时候

72
00:02:11,954 --> 00:02:13,514
你就连接RuKeypr服务

73
00:02:13,514 --> 00:02:16,394
把RuKeypr这个节点下的IP地址

74
00:02:16,394 --> 00:02:17,954
拿到你自己的应用里边

75
00:02:18,194 --> 00:02:19,074
比如说A启动了

76
00:02:19,074 --> 00:02:21,634
它拿到这个节点里边是101

77
00:02:21,634 --> 00:02:23,194
那你就连接101的数据库

78
00:02:23,314 --> 00:02:24,194
它也启动了

79
00:02:24,194 --> 00:02:25,874
然后就会去拿什么

80
00:02:25,914 --> 00:02:27,034
它就会去拿

81
00:02:27,514 --> 00:02:29,074
拿这个节点的一个数据

82
00:02:29,074 --> 00:02:30,114
你看也是121

83
00:02:30,114 --> 00:02:31,314
这个启动了也是121

84
00:02:31,314 --> 00:02:31,954
没有问题

85
00:02:32,234 --> 00:02:34,034
我们能打开我们的一个插线

86
00:02:34,274 --> 00:02:36,114
这块我们直接create一个节点

87
00:02:36,114 --> 00:02:37,714
叫mySQL DB

88
00:02:37,714 --> 00:02:40,190
然后到里边放一个192.168

89
00:02:40,794 --> 00:02:43,634
192.168.66.多少

90
00:02:43,634 --> 00:02:45,394
101没有问题

91
00:02:45,674 --> 00:02:47,194
然后你看这是没有解验

92
00:02:47,194 --> 00:02:48,434
我们可以get一下

93
00:02:48,754 --> 00:02:50,554
mysqld没问题吧

94
00:02:50,554 --> 00:02:52,794
你看这里是不是有一个ip地址

95
00:02:53,034 --> 00:02:54,994
当我们的应用记住

96
00:02:54,994 --> 00:02:57,114
当我们的应用a应用b应用c

97
00:02:57,114 --> 00:02:58,994
他在启动的时候

98
00:02:58,994 --> 00:02:59,754
启动的时候

99
00:02:59,754 --> 00:03:03,114
都去rootkeeper集群里边获取这个节点

100
00:03:03,114 --> 00:03:04,714
那么问大家所有的应用

101
00:03:04,714 --> 00:03:05,874
是不是都连的是121

102
00:03:06,314 --> 00:03:06,914
没有问题了

103
00:03:07,354 --> 00:03:10,754
但是如果说我们要切换的时候

104
00:03:10,754 --> 00:03:11,154
怎么办

105
00:03:11,794 --> 00:03:15,074
我们直接可以通过rootkeeper的一个监听机制

106
00:03:15,074 --> 00:03:15,754
去实现

107
00:03:15,754 --> 00:03:17,674
我们直接大家注意

108
00:03:17,674 --> 00:03:20,034
我直接把这个数据

109
00:03:20,034 --> 00:03:21,594
我是不是直接改掉就可以了

110
00:03:21,714 --> 00:03:22,914
你说我们的应用

111
00:03:22,914 --> 00:03:25,554
你根本就不需要再把这个应用重新干嘛

112
00:03:25,794 --> 00:03:27,874
重新改原代码

113
00:03:27,874 --> 00:03:28,794
然后重新编译

114
00:03:28,794 --> 00:03:29,474
重新发布

115
00:03:29,474 --> 00:03:30,634
停掉服务等等

116
00:03:30,634 --> 00:03:31,714
这些操作都不用了

117
00:03:31,714 --> 00:03:34,154
我们只需要把rootkeeper里面配置文件一改

118
00:03:34,154 --> 00:03:36,554
所有的应用都自动切换到这边了

119
00:03:36,554 --> 00:03:37,354
爽不爽

120
00:03:37,354 --> 00:03:38,674
这就是监听机制

121
00:03:38,674 --> 00:03:39,234
怎么去做

122
00:03:39,234 --> 00:03:41,074
比如说你看我们假如说

123
00:03:41,274 --> 00:03:42,914
现在我们还是101

124
00:03:43,034 --> 00:03:43,354
没问题

125
00:03:43,354 --> 00:03:44,714
101登机了

126
00:03:44,914 --> 00:03:45,714
切换到这边

127
00:03:45,714 --> 00:03:47,034
我们只需要做一步干嘛

128
00:03:47,234 --> 00:03:48,594
set斜构

129
00:03:48,594 --> 00:03:49,834
mysqldb

130
00:03:49,834 --> 00:03:53,074
然后把192.168.66.102

131
00:03:53,354 --> 00:03:54,274
一回车

132
00:03:54,434 --> 00:03:55,314
一回车之后

133
00:03:55,634 --> 00:03:57,914
我们就有一个什么监听的机制

134
00:03:57,914 --> 00:03:59,074
什么叫监听的机制

135
00:03:59,274 --> 00:04:00,714
我们的rootkeeper

136
00:04:00,714 --> 00:04:04,154
他会主动的给我们的应用A

137
00:04:04,194 --> 00:04:05,314
应用B

138
00:04:05,314 --> 00:04:07,554
应用C发送一个消息

139
00:04:07,554 --> 00:04:08,074
什么消息

140
00:04:08,074 --> 00:04:10,834
就说这个叫mysqldb

141
00:04:10,834 --> 00:04:11,754
这个节点

142
00:04:11,754 --> 00:04:13,274
它发生了改变

143
00:04:13,274 --> 00:04:13,874
改变什么

144
00:04:14,154 --> 00:04:15,994
把101改成了102

145
00:04:16,114 --> 00:04:17,194
这个时候我们的应用

146
00:04:17,474 --> 00:04:18,314
他自此

147
00:04:18,594 --> 00:04:20,354
自此他在操作数据库的时候

148
00:04:20,474 --> 00:04:21,754
干嘛就跑到这边了

149
00:04:22,114 --> 00:04:23,194
他有一个什么机制

150
00:04:23,194 --> 00:04:24,754
就是有一个监听的机制

151
00:04:24,954 --> 00:04:26,474
我们一直在监听这个节点

152
00:04:26,474 --> 00:04:27,154
它有没有变化

153
00:04:27,154 --> 00:04:27,914
就是我们的应用A

154
00:04:27,914 --> 00:04:28,314
应用B

155
00:04:28,314 --> 00:04:28,834
应用C

156
00:04:28,834 --> 00:04:30,274
他监听这个节点

157
00:04:30,274 --> 00:04:31,034
它变不变

158
00:04:31,034 --> 00:04:31,954
只要变

159
00:04:32,114 --> 00:04:32,874
你的rootkeeper

160
00:04:32,874 --> 00:04:34,714
你就得主动的通知我

161
00:04:34,714 --> 00:04:36,994
这个主动通知的功能

162
00:04:36,994 --> 00:04:38,034
我们就称它为是

163
00:04:38,034 --> 00:04:39,314
监听机制

164
00:04:39,434 --> 00:04:40,154
明白了没有

165
00:04:40,154 --> 00:04:40,954
我们是不是可以通过

166
00:04:40,954 --> 00:04:43,274
rootkeeper监听机制的特性

167
00:04:43,314 --> 00:04:46,034
轻松的实现解决这样的一个难题

168
00:04:46,034 --> 00:04:46,434
是不是

169
00:04:46,634 --> 00:04:47,234
来吧

170
00:04:47,234 --> 00:04:47,714
我们来看一下

171
00:04:47,714 --> 00:04:48,474
在rootkeeper中

172
00:04:48,634 --> 00:04:50,154
我们到底该如何去做

173
00:04:50,154 --> 00:04:52,314
首先我们要监听一个节点

174
00:04:52,314 --> 00:04:53,914
我们可以通过water

175
00:04:54,434 --> 00:04:55,514
就这个water

176
00:04:55,874 --> 00:04:56,634
我们来看一下

177
00:04:57,074 --> 00:04:58,034
在这个rootkeeper中

178
00:04:58,034 --> 00:04:59,874
它引入了一个叫做water的机制

179
00:05:00,034 --> 00:05:01,434
来实现这种分布式的

180
00:05:01,434 --> 00:05:02,674
通知的这种功能

181
00:05:02,714 --> 00:05:03,794
就是当我们干嘛

182
00:05:04,154 --> 00:05:05,834
就是当我们rootkeeper

183
00:05:05,834 --> 00:05:08,554
它允许客户端向他注册了一个监听

184
00:05:08,554 --> 00:05:11,154
就是我们应用A应用B应用C

185
00:05:11,194 --> 00:05:12,154
他在启动的时候

186
00:05:12,274 --> 00:05:13,154
获取这个节点

187
00:05:13,154 --> 00:05:14,714
并且注册了监听

188
00:05:14,714 --> 00:05:16,434
就是当这个节点发生改变的时候

189
00:05:16,554 --> 00:05:17,594
主动会通知

190
00:05:17,594 --> 00:05:18,154
这就是什么

191
00:05:18,354 --> 00:05:20,434
分布式通知的功能

192
00:05:20,674 --> 00:05:21,514
非常简单

193
00:05:21,954 --> 00:05:23,074
我们要实现这个功能

194
00:05:23,194 --> 00:05:24,154
我们只需要做一个什么

195
00:05:24,314 --> 00:05:25,594
做一个water

196
00:05:25,754 --> 00:05:26,314
做一个water

197
00:05:26,314 --> 00:05:27,674
它是通过water机制

198
00:05:27,674 --> 00:05:29,194
来实现的分布式通知

199
00:05:29,634 --> 00:05:30,314
具体怎么去做

200
00:05:30,754 --> 00:05:32,634
我们可以通过ls

201
00:05:32,634 --> 00:05:34,074
然后后边跟一个路径

202
00:05:34,074 --> 00:05:35,034
然后再跟一个什么

203
00:05:35,034 --> 00:05:35,754
watch

204
00:05:35,754 --> 00:05:37,514
就代表的是我们要去监听了

205
00:05:37,514 --> 00:05:38,234
我们来试一下

206
00:05:38,874 --> 00:05:40,474
我们打开一个客户端

207
00:05:40,474 --> 00:05:41,354
然后我们在这边

208
00:05:41,394 --> 00:05:42,594
我们也打开一个客户端

209
00:05:42,594 --> 00:05:43,594
比如说zk

210
00:05:43,954 --> 00:05:44,634
client

211
00:05:44,634 --> 00:05:45,754
打开了两个客户端

212
00:05:45,754 --> 00:05:46,234
是不是

213
00:05:46,714 --> 00:05:47,554
两个客户端没问题

214
00:05:48,074 --> 00:05:48,794
这边一个客户端

215
00:05:48,794 --> 00:05:49,514
这边一个客户端

216
00:05:49,514 --> 00:05:50,754
假如说是两个客户端

217
00:05:50,954 --> 00:05:53,114
然后在这边让我们使用ls

218
00:05:53,114 --> 00:05:53,914
斜杠什么

219
00:05:54,394 --> 00:05:56,234
mysqldb

220
00:05:56,394 --> 00:05:58,394
我们要监听这个节点叫watch

221
00:05:59,074 --> 00:06:00,514
你看这个时候大家注意

222
00:06:00,514 --> 00:06:02,234
我们是不是要监听这个节点

223
00:06:02,234 --> 00:06:02,594
没问题

224
00:06:02,794 --> 00:06:04,274
老师这个单词是不是打错了

225
00:06:04,274 --> 00:06:05,434
这个watch这个单词打错了

226
00:06:05,434 --> 00:06:06,234
我们来看一下

227
00:06:06,834 --> 00:06:08,834
它叫watch

228
00:06:08,834 --> 00:06:10,910
我们直接走你

229
00:06:11,546 --> 00:06:15,946
ls-mySQL-w-atch

230
00:06:15,946 --> 00:06:16,426
是不是

231
00:06:16,426 --> 00:06:17,906
你看他说让我们你看

232
00:06:17,906 --> 00:06:21,946
please使用一个更更更什么的更w就可以了

233
00:06:21,946 --> 00:06:24,506
可能是老师这个记的是一个老版本

234
00:06:24,506 --> 00:06:25,786
我们试一下更w

235
00:06:26,506 --> 00:06:27,626
我们回车

236
00:06:27,786 --> 00:06:28,946
他说什么呢

237
00:06:28,946 --> 00:06:31,666
说你这个节点就mySQL这个节点它不存在

238
00:06:31,666 --> 00:06:33,866
我们继续我们db是不是走你

239
00:06:33,866 --> 00:06:35,186
走你你看

240
00:06:35,226 --> 00:06:37,186
他说ls这个里边没有

241
00:06:37,186 --> 00:06:38,986
那比如说我们修改了一个节点

242
00:06:38,986 --> 00:06:39,986
我们来修改个节点

243
00:06:39,986 --> 00:06:44,026
比如说我们create一个什么的mySQL

244
00:06:44,026 --> 00:06:45,186
什么的db

245
00:06:45,186 --> 00:06:46,626
然后里边有个a

246
00:06:46,626 --> 00:06:47,986
然后放了一个1

247
00:06:47,986 --> 00:06:50,106
大家注意你看我在这执行了一个什么

248
00:06:50,306 --> 00:06:52,586
执行了一个create mysql-a

249
00:06:52,826 --> 00:06:54,546
我在mySQL-db里边

250
00:06:54,546 --> 00:06:56,986
放了一个a的一个子节点的时候

251
00:06:56,986 --> 00:06:59,386
大家注意你看这块是马上有一个形影

252
00:06:59,426 --> 00:06:59,946
形影什么

253
00:07:00,226 --> 00:07:01,706
他就说我们这个节点

254
00:07:01,706 --> 00:07:03,906
就是我们这个节点发生了改变

255
00:07:03,906 --> 00:07:04,466
什么意思

256
00:07:04,586 --> 00:07:05,506
我们来看一下

257
00:07:05,906 --> 00:07:08,106
ls它代表的是什么

258
00:07:08,106 --> 00:07:09,466
如果说我们使用这种方式

259
00:07:09,466 --> 00:07:10,306
它代表的是什么

260
00:07:10,706 --> 00:07:12,826
它监听的是节点的变化

261
00:07:13,026 --> 00:07:13,306
记住

262
00:07:13,746 --> 00:07:17,026
ls watch它监听的是节点

263
00:07:17,026 --> 00:07:18,186
而不是值

264
00:07:18,426 --> 00:07:20,186
如果说你想监听值

265
00:07:20,186 --> 00:07:21,146
你要使用什么

266
00:07:21,146 --> 00:07:22,506
要使用get

267
00:07:22,506 --> 00:07:24,186
就是使用get的这种方式

268
00:07:24,386 --> 00:07:24,906
注意

269
00:07:25,026 --> 00:07:26,826
这个是什么老的写法

270
00:07:26,826 --> 00:07:28,026
那现在写法叫什么

271
00:07:28,026 --> 00:07:29,826
叫girl w

272
00:07:29,986 --> 00:07:30,746
这个是不是就没了

273
00:07:31,466 --> 00:07:32,826
这个是不是也是什么

274
00:07:33,266 --> 00:07:34,866
girl w的这种方式

275
00:07:34,866 --> 00:07:35,346
来试试

276
00:07:35,666 --> 00:07:38,626
girl记住ls是节点发生变化

277
00:07:38,626 --> 00:07:39,306
它就通知了

278
00:07:39,306 --> 00:07:40,506
你看通知了没有

279
00:07:40,826 --> 00:07:42,546
是不是节点发生了改变

280
00:07:42,546 --> 00:07:43,386
趁什么改变

281
00:07:44,026 --> 00:07:44,826
比如说我们停掉

282
00:07:44,906 --> 00:07:45,626
停掉

283
00:07:45,666 --> 00:07:46,106
我们继续

284
00:07:47,106 --> 00:07:50,706
我们那get girl w监听mysqldb

285
00:07:50,866 --> 00:07:51,226
注意

286
00:07:51,946 --> 00:07:52,986
没有是吧

287
00:07:52,986 --> 00:07:54,026
我们没有连进去

288
00:07:54,186 --> 00:07:57,866
zkclient.sh

289
00:07:57,946 --> 00:08:00,546
然后我们get girl w

290
00:08:00,546 --> 00:08:02,626
斜girl mysqldb

291
00:08:03,306 --> 00:08:04,146
监听它

292
00:08:04,426 --> 00:08:05,546
我们是不是得到了这个数据

293
00:08:05,546 --> 00:08:06,066
是不是

294
00:08:06,266 --> 00:08:07,866
我们在这边我们搞一个破坏

295
00:08:07,866 --> 00:08:08,906
我们set

296
00:08:08,906 --> 00:08:09,786
我们改一下

297
00:08:09,786 --> 00:08:11,666
set mysqldb

298
00:08:11,706 --> 00:08:15,666
改成192.168.66.102

299
00:08:15,666 --> 00:08:16,866
我们只要一回车

300
00:08:16,866 --> 00:08:17,586
大家注意你看

301
00:08:17,586 --> 00:08:18,546
这边这个点点

302
00:08:18,546 --> 00:08:19,346
是不是马上变成什么

303
00:08:19,386 --> 00:08:20,466
变成蓝点点了

304
00:08:20,466 --> 00:08:21,826
注意你看蓝点点了

305
00:08:21,826 --> 00:08:23,266
这就说明有一个通知

306
00:08:23,466 --> 00:08:24,986
通知说的非常的简单

307
00:08:24,986 --> 00:08:25,586
记住说的

308
00:08:25,586 --> 00:08:27,706
他说node data change

309
00:08:27,706 --> 00:08:29,666
他说这个节点什么

310
00:08:29,986 --> 00:08:32,866
数据你看节点数据发生了改变

311
00:08:33,106 --> 00:08:34,186
发生了改变要干嘛

312
00:08:34,546 --> 00:08:35,946
就像我们之前所说的

313
00:08:35,946 --> 00:08:38,186
只要这个节点发生了改变

314
00:08:38,186 --> 00:08:38,506
你干嘛

315
00:08:38,506 --> 00:08:40,906
通知通知通知

316
00:08:41,466 --> 00:08:42,266
我通知完以后

317
00:08:42,266 --> 00:08:42,986
我所有的应用

318
00:08:42,986 --> 00:08:44,906
是不是可以直接变到这边的数据库

319
00:08:44,906 --> 00:08:45,266
了吧

320
00:08:45,266 --> 00:08:46,226
非常的方便

321
00:08:46,386 --> 00:08:48,466
这就是我们所说的监听机制

322
00:08:48,466 --> 00:08:50,466
但是这两个一个叫ls

323
00:08:50,626 --> 00:08:52,346
一个叫ls监听

324
00:08:52,346 --> 00:08:53,506
一个叫get监听

325
00:08:53,506 --> 00:08:55,466
一个监听的是节点变化

326
00:08:55,466 --> 00:08:56,426
一个监听的是什么

327
00:08:56,426 --> 00:08:57,546
< No Speech >

328
00:08:57,546 --> 00:08:59,066
节点值的变化

329
00:08:59,266 --> 00:09:00,106
小伙伴们要区分

330
00:09:00,106 --> 00:09:02,066
你到底是想监听节点

331
00:09:02,386 --> 00:09:04,586
还是想要监听节点的值

332
00:09:04,946 --> 00:09:06,626
按照我们刚刚的需求

333
00:09:06,626 --> 00:09:08,626
我们肯定是监听的是值

334
00:09:09,426 --> 00:09:10,666
当然我们在结束之前

335
00:09:10,746 --> 00:09:12,866
我们再来给小伙伴一个温馨提示

336
00:09:13,066 --> 00:09:14,746
这个watch监听机制

337
00:09:15,266 --> 00:09:16,746
只能使用一次

338
00:09:16,746 --> 00:09:17,426
明白没有

339
00:09:17,426 --> 00:09:18,906
只能使用一次

340
00:09:19,106 --> 00:09:20,746
如果说你还想使用

341
00:09:20,866 --> 00:09:21,386
你需要干嘛

342
00:09:21,626 --> 00:09:23,026
重新监听

343
00:09:23,026 --> 00:09:25,586
就比如说你还是在之前一个ls watch

344
00:09:25,586 --> 00:09:26,466
明白没有

345
00:09:26,466 --> 00:09:28,026
这就叫什么监听机制

346
00:09:28,026 --> 00:09:28,546
好了

347
00:09:28,746 --> 00:09:30,666
这节课我们学完了监听机制

348
00:09:30,826 --> 00:09:31,906
我们在结束之前

349
00:09:32,026 --> 00:09:33,866
我们再来做两个练习题

350
00:09:33,866 --> 00:09:34,546
第一个

351
00:09:34,546 --> 00:09:36,746
这个zookeeper它引入了个什么机制

352
00:09:36,746 --> 00:09:38,986
来实现了这种分布式的通知的功能

353
00:09:39,706 --> 00:09:41,706
第一个start stage

354
00:09:41,706 --> 00:09:42,426
不是是吧

355
00:09:42,426 --> 00:09:43,906
create delete都不是

356
00:09:43,906 --> 00:09:45,586
是不是应该是water

357
00:09:45,746 --> 00:09:47,226
是不是应该选择的是d

358
00:09:47,986 --> 00:09:49,746
第二个是zookeeper

359
00:09:49,986 --> 00:09:52,226
它的技术中

360
00:09:52,466 --> 00:09:53,866
我们该如何监听

361
00:09:54,026 --> 00:09:54,506
记住

362
00:09:54,506 --> 00:09:57,706
如何监听节点值的变化

363
00:09:57,706 --> 00:09:59,706
注意是值的变化

364
00:09:59,746 --> 00:10:01,626
第一个ls

365
00:10:01,626 --> 00:10:03,866
ls直接就可以跑出在外了

366
00:10:03,866 --> 00:10:04,386
是不是

367
00:10:04,386 --> 00:10:05,866
因为肯定是应该是get的

368
00:10:05,866 --> 00:10:07,106
所以说我们应该加一个什么

369
00:10:07,346 --> 00:10:08,586
叫watch

370
00:10:08,746 --> 00:10:10,106
所以说我们必须要加一个watch

371
00:10:10,106 --> 00:10:11,226
当然了这是老版本

372
00:10:11,226 --> 00:10:12,226
新版本的话

373
00:10:12,226 --> 00:10:14,066
是不是要加一个-w的一个参数

374
00:10:14,666 --> 00:10:15,626
是不是很明显

375
00:10:15,626 --> 00:10:17,666
这个-w就是watch的一个开头

376
00:10:17,946 --> 00:10:18,466
好了

377
00:10:18,666 --> 00:10:20,746
这节课我们讲解监听机制

378
00:10:20,946 --> 00:10:22,386
到这就结束了

379
00:10:22,386 --> 00:10:23,486
谢谢大家

