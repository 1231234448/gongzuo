1
00:00:00,410 --> 00:00:01,890
Hello 小伙伴大家好

2
00:00:01,890 --> 00:00:05,010
这节课我们来学习什么是Rookieper

3
00:00:05,010 --> 00:00:06,610
我们终于学到Rookieper了

4
00:00:06,610 --> 00:00:07,730
因为我们要讲Rookieper

5
00:00:07,730 --> 00:00:09,690
但是我们前面两节一个讲了集中式

6
00:00:09,690 --> 00:00:10,530
一个讲了CAP

7
00:00:10,530 --> 00:00:12,130
一直到没有讲到Rookieper

8
00:00:12,130 --> 00:00:14,210
那到底什么是Rookieper呢

9
00:00:14,210 --> 00:00:16,050
我们在上一节课我们了解到了

10
00:00:16,050 --> 00:00:18,690
分布式架构的三个重要的指标

11
00:00:18,690 --> 00:00:19,294
一个是

12
00:00:19,294 --> 00:00:21,210
< No Speech >

13
00:00:21,210 --> 00:00:22,530
分居容措性

14
00:00:22,530 --> 00:00:23,358
还有一个是

15
00:00:24,346 --> 00:00:26,346
那到底什么是Rookieper呢

16
00:00:26,346 --> 00:00:30,866
这个Rookieper它在分布式架构中是一个鼻子

17
00:00:30,866 --> 00:00:32,586
你只要是分布式架构

18
00:00:32,586 --> 00:00:35,786
你必然会要使用我们这个Rookieper

19
00:00:35,786 --> 00:00:36,746
那我们来看看吧

20
00:00:36,746 --> 00:00:38,078
为什么要使用这个Rookieper

21
00:00:38,078 --> 00:00:39,258
< No Speech >

22
00:00:39,258 --> 00:00:40,858
我们之前是单一架构

23
00:00:40,858 --> 00:00:42,938
我们变成了一个分布式架构

24
00:00:42,938 --> 00:00:43,858
我们有什么

25
00:00:44,018 --> 00:00:46,018
我们有核心交易的平台

26
00:00:46,018 --> 00:00:47,698
信息服务的平台

27
00:00:47,698 --> 00:00:50,538
每个服务平台里边又有好多好多个子服务

28
00:00:50,538 --> 00:00:51,138
看到没有

29
00:00:51,138 --> 00:00:53,178
这就是一套分布式的架构

30
00:00:53,218 --> 00:00:56,098
但是分布架构它有一些问题

31
00:00:56,098 --> 00:00:59,018
因为你每一个服务它都是独立的

32
00:00:59,018 --> 00:00:59,658
是不是

33
00:00:59,858 --> 00:01:01,098
每一个服务都是独立的

34
00:01:01,098 --> 00:01:04,578
但是你多个节点如果想要协作

35
00:01:04,738 --> 00:01:05,618
这个时候怎么办

36
00:01:05,618 --> 00:01:10,498
比如说每天定时任务由哪个节点来执行

37
00:01:10,738 --> 00:01:12,418
比如说你看我们这么多服务

38
00:01:12,738 --> 00:01:13,618
这么多

39
00:01:13,618 --> 00:01:14,658
比如说有一个定时任务

40
00:01:14,658 --> 00:01:16,734
到底哪一个服务执行呢

41
00:01:16,734 --> 00:01:17,754
< No Speech >

42
00:01:17,754 --> 00:01:18,834
是吧太多了

43
00:01:18,834 --> 00:01:20,434
往哪个服务具体哪个服务执行

44
00:01:20,434 --> 00:01:21,034
不知道

45
00:01:21,314 --> 00:01:21,954
是不是

46
00:01:21,954 --> 00:01:24,834
那比如说我们RPC调用的时候

47
00:01:24,834 --> 00:01:25,954
如何去发现服务

48
00:01:26,074 --> 00:01:28,594
比如说就像这个订单服务

49
00:01:28,594 --> 00:01:29,954
他怎么知道

50
00:01:29,954 --> 00:01:31,234
他有还有一个协商服务

51
00:01:31,394 --> 00:01:33,554
这个服务的IP地址端口在哪里

52
00:01:33,954 --> 00:01:35,874
你说这是一个核心交易平台

53
00:01:36,554 --> 00:01:38,354
他这个平台内部

54
00:01:38,354 --> 00:01:39,154
他怎么知道

55
00:01:39,154 --> 00:01:41,154
他还有一个信息服务平台

56
00:01:41,154 --> 00:01:43,034
他的IP地址以及端口是多少

57
00:01:43,034 --> 00:01:43,554
是不是

58
00:01:43,554 --> 00:01:46,634
他们总需要有一个协调管理的一个东东

59
00:01:46,634 --> 00:01:47,274
是不是

60
00:01:47,274 --> 00:01:49,954
第三个是如何保证

61
00:01:49,954 --> 00:01:51,994
并发请求的一个密证性

62
00:01:52,274 --> 00:01:53,834
所以说这么多问题

63
00:01:53,954 --> 00:01:55,074
我们都归纳于什么

64
00:01:55,314 --> 00:01:57,034
多个节点什么问题

65
00:01:57,034 --> 00:01:58,434
协调的问题

66
00:01:58,434 --> 00:01:59,594
没办法协调

67
00:01:59,594 --> 00:02:00,274
是不是

68
00:02:00,594 --> 00:02:02,034
如果说你老是简单

69
00:02:02,034 --> 00:02:03,194
你在这个里边维护就完了

70
00:02:03,434 --> 00:02:04,514
那么你在这个里边维护

71
00:02:04,514 --> 00:02:05,554
你这个里边要不要维护

72
00:02:05,554 --> 00:02:06,274
你这个里边维护

73
00:02:06,274 --> 00:02:07,354
你这个里边要不要维护

74
00:02:07,354 --> 00:02:07,914
太麻烦了

75
00:02:07,914 --> 00:02:08,434
是不是

76
00:02:08,434 --> 00:02:10,914
所以说维护的这套东西

77
00:02:11,034 --> 00:02:13,114
我不能在所有的里边都写一遍

78
00:02:13,234 --> 00:02:14,834
我只需要把它抽离出来

79
00:02:14,874 --> 00:02:15,434
来一个什么

80
00:02:15,434 --> 00:02:17,434
专门来一个协调管理就完了

81
00:02:18,074 --> 00:02:18,914
所以说大家注意

82
00:02:19,634 --> 00:02:21,834
我们上面所说的这几个问题

83
00:02:21,994 --> 00:02:24,194
都归纳于多个节点

84
00:02:24,194 --> 00:02:25,994
会出现协调的问题

85
00:02:25,994 --> 00:02:26,594
是不是

86
00:02:26,594 --> 00:02:28,274
所以说这种可怕

87
00:02:28,274 --> 00:02:30,834
如果靠节点自身协调

88
00:02:30,954 --> 00:02:31,914
非常不可靠

89
00:02:31,914 --> 00:02:33,314
性能也不可取

90
00:02:33,554 --> 00:02:34,074
是不是

91
00:02:34,234 --> 00:02:36,194
你说你所有的服务

92
00:02:36,194 --> 00:02:38,554
都靠订单服务里边一个在维护

93
00:02:38,594 --> 00:02:39,354
他如果挂了

94
00:02:39,914 --> 00:02:40,634
怎么办

95
00:02:40,674 --> 00:02:41,714
是不是不可靠

96
00:02:41,914 --> 00:02:44,194
所以说我们必须要有一个独立的服务

97
00:02:44,194 --> 00:02:45,674
做到什么协调服务

98
00:02:45,674 --> 00:02:46,994
它必须是可靠的

99
00:02:46,994 --> 00:02:48,594
还要保证性能

100
00:02:48,594 --> 00:02:49,194
这个是什么

101
00:02:49,674 --> 00:02:51,354
肯定就是我们这些个所要讲的内容了

102
00:02:51,714 --> 00:02:54,514
就是rootkeeper来解决这样的一个问题

103
00:02:54,514 --> 00:02:55,154
OK

104
00:02:55,554 --> 00:02:58,154
假如说你看这个是再给大家演示了一下

105
00:02:58,154 --> 00:02:59,754
我们每一个业务中

106
00:02:59,754 --> 00:03:00,394
你说

107
00:03:01,074 --> 00:03:03,394
我们在这么多问题

108
00:03:03,514 --> 00:03:04,274
你看这么多问题

109
00:03:04,274 --> 00:03:06,714
我们在每一个服务里边去写

110
00:03:06,714 --> 00:03:07,594
你看就像这个

111
00:03:07,794 --> 00:03:09,354
在业务里边

112
00:03:09,354 --> 00:03:10,234
是不是写一个什么

113
00:03:10,234 --> 00:03:11,154
写个进程

114
00:03:11,154 --> 00:03:13,274
他们直接进行通讯不就完了吗

115
00:03:13,274 --> 00:03:14,354
是不是很麻烦

116
00:03:14,594 --> 00:03:15,994
就是我们通过这种方式去做

117
00:03:15,994 --> 00:03:16,514
你看

118
00:03:16,714 --> 00:03:18,434
处理复杂逻辑

119
00:03:18,434 --> 00:03:19,354
是不是可以重用

120
00:03:19,714 --> 00:03:20,394
太复杂了

121
00:03:20,394 --> 00:03:20,714
怎么办

122
00:03:20,994 --> 00:03:24,474
我们可以把多个业务里边的东东

123
00:03:24,634 --> 00:03:25,794
这个东东

124
00:03:25,794 --> 00:03:27,474
我们是不是可以剥离出来

125
00:03:27,634 --> 00:03:28,234
是不是

126
00:03:28,234 --> 00:03:30,954
作为一个基础设施开发不就完了吗

127
00:03:30,954 --> 00:03:31,994
就像这样

128
00:03:32,114 --> 00:03:33,914
把里边的公用的东西

129
00:03:33,914 --> 00:03:34,954
我们给它抽离出来

130
00:03:35,154 --> 00:03:36,594
抽离出来的这个东西

131
00:03:36,594 --> 00:03:39,474
就是要解决我们刚刚所说的这几个问题

132
00:03:39,514 --> 00:03:40,394
是什么问题

133
00:03:40,434 --> 00:03:42,474
多个节点协调的问题

134
00:03:42,474 --> 00:03:45,034
那我们就通过rookieper来去做

135
00:03:45,034 --> 00:03:45,754
来我们来看看

136
00:03:46,114 --> 00:03:47,514
到底什么是rookieper

137
00:03:47,514 --> 00:03:48,354
以及rookieper

138
00:03:48,354 --> 00:03:49,714
它从何而来

139
00:03:49,914 --> 00:03:50,354
首先

140
00:03:50,514 --> 00:03:51,074
这个rookieper

141
00:03:51,074 --> 00:03:52,794
它最早是起源于

142
00:03:52,794 --> 00:03:55,714
雅虎研究院的一个研究小组

143
00:03:55,794 --> 00:03:56,634
就在当时的时候

144
00:03:56,754 --> 00:03:57,674
研究人员

145
00:03:57,834 --> 00:03:58,554
他在内部的时候

146
00:03:58,554 --> 00:03:59,594
也是有好多系统

147
00:03:59,594 --> 00:04:02,474
并且系统他们之间也是需要协调的

148
00:04:02,474 --> 00:04:02,954
是吧

149
00:04:02,954 --> 00:04:04,594
但是你又不能说

150
00:04:04,594 --> 00:04:05,514
你看我们如果说

151
00:04:05,514 --> 00:04:07,514
我们抽离出来一个服务的话

152
00:04:08,034 --> 00:04:09,914
这个服务它又出现单点故障问题了

153
00:04:09,914 --> 00:04:11,674
他一挂不又完兜子了

154
00:04:11,674 --> 00:04:12,234
是不是

155
00:04:12,234 --> 00:04:14,874
所以他需要开发出这种分布式的

156
00:04:14,874 --> 00:04:16,394
这种协调的服务

157
00:04:16,394 --> 00:04:17,354
还得保证

158
00:04:17,394 --> 00:04:18,794
单点固正的这种问题

159
00:04:18,794 --> 00:04:19,954
还得解决这种问题

160
00:04:19,954 --> 00:04:21,674
所以说他们需要造一个东西

161
00:04:21,674 --> 00:04:22,234
叫什么

162
00:04:22,234 --> 00:04:23,714
就叫rookieper

163
00:04:24,154 --> 00:04:25,154
他们需要你看

164
00:04:25,194 --> 00:04:27,474
他们需要试图开发一个什么

165
00:04:27,914 --> 00:04:30,354
通用的无单点固正问题的

166
00:04:30,354 --> 00:04:32,714
分布式的协调空间

167
00:04:33,314 --> 00:04:34,074
协调空间

168
00:04:34,074 --> 00:04:36,914
以便让我们开发人员把精力干嘛

169
00:04:37,154 --> 00:04:38,194
放在业务上

170
00:04:38,194 --> 00:04:39,914
就是放在业务上

171
00:04:39,914 --> 00:04:42,754
你不要把精力放到基础设施上

172
00:04:42,794 --> 00:04:43,634
明白没有

173
00:04:43,634 --> 00:04:44,834
这就是rookieper

174
00:04:44,834 --> 00:04:45,794
从怎么来的

175
00:04:46,114 --> 00:04:49,434
它最早起源于一个雅虎的一个研究院

176
00:04:49,754 --> 00:04:51,354
来我们来看看rookieper

177
00:04:51,354 --> 00:04:52,434
< No Speech >

178
00:04:52,434 --> 00:04:53,034
这个rookieper

179
00:04:53,954 --> 00:04:56,154
它是一个开放源代码的

180
00:04:56,154 --> 00:04:57,634
分布式的协调服务

181
00:04:57,634 --> 00:04:58,554
记住这个名字

182
00:04:58,594 --> 00:05:00,354
它是首先第一个rookieper

183
00:05:00,354 --> 00:05:02,074
它自己就是一个分布式的

184
00:05:02,114 --> 00:05:02,794
明白没有

185
00:05:02,794 --> 00:05:04,274
它自己就是一个分布式的

186
00:05:04,314 --> 00:05:06,994
它是一个分布式的协调服务

187
00:05:07,514 --> 00:05:08,194
明白没有

188
00:05:08,354 --> 00:05:09,074
比如说你说老师

189
00:05:09,074 --> 00:05:10,194
我有了它以后怎么办

190
00:05:10,314 --> 00:05:11,474
你看我们这个问题

191
00:05:11,874 --> 00:05:14,274
每天定每天的定时任务

192
00:05:14,274 --> 00:05:15,034
到底由谁执行

193
00:05:15,234 --> 00:05:16,314
我们看我们这样

194
00:05:16,514 --> 00:05:17,634
我们把这个rookieper

195
00:05:17,714 --> 00:05:18,714
我们抽离出来了

196
00:05:18,714 --> 00:05:19,474
在这个里边

197
00:05:19,554 --> 00:05:22,354
我就说定时任务的一号机器去执行

198
00:05:22,354 --> 00:05:24,394
或者我在一号机里面写个IP地址

199
00:05:24,634 --> 00:05:25,714
所有的业务

200
00:05:25,874 --> 00:05:26,434
是吧

201
00:05:26,434 --> 00:05:28,674
那你说到底这个定任务谁执行

202
00:05:28,994 --> 00:05:30,394
他就去rookieper里面

203
00:05:30,394 --> 00:05:32,794
看看这里边的IP地址是谁执行

204
00:05:33,634 --> 00:05:35,034
我们这个逻辑还要写到自己里边吗

205
00:05:35,034 --> 00:05:35,714
根本不用了

206
00:05:35,754 --> 00:05:36,714
这就是rookieper

207
00:05:37,114 --> 00:05:38,754
首先它自己就是一个分布式的

208
00:05:38,754 --> 00:05:40,514
并且它自己还解决了

209
00:05:40,554 --> 00:05:42,034
单点故障的问题

210
00:05:42,034 --> 00:05:44,074
而且rookieper它的设计目标

211
00:05:44,234 --> 00:05:45,794
是将那些复杂的

212
00:05:45,834 --> 00:05:47,594
且容易出错的分布式

213
00:05:47,594 --> 00:05:48,754
一致性的服务

214
00:05:48,794 --> 00:05:49,754
封装起来了

215
00:05:50,114 --> 00:05:51,834
构建成了一个高效的

216
00:05:51,834 --> 00:05:53,194
可靠的一个什么

217
00:05:53,514 --> 00:05:55,074
语言语集

218
00:05:55,274 --> 00:05:56,554
我们说了之前我们说

219
00:05:56,554 --> 00:05:59,554
CAP分布式的一个什么

220
00:05:59,994 --> 00:06:00,674
指标

221
00:06:00,674 --> 00:06:03,314
有一致性分区成分项和可用性

222
00:06:03,314 --> 00:06:05,034
但是rookieper

223
00:06:05,034 --> 00:06:07,394
它就是解决CAP里边的什么

224
00:06:07,394 --> 00:06:10,474
它其实就是CAP里边的一致性

225
00:06:10,474 --> 00:06:12,834
它能保证了我们每个

226
00:06:12,994 --> 00:06:14,714
记住每个

227
00:06:14,834 --> 00:06:16,514
这个什么数据的一致性

228
00:06:16,514 --> 00:06:17,474
这也是一个rookieper

229
00:06:17,474 --> 00:06:18,514
它重要的一个特点

230
00:06:18,594 --> 00:06:20,474
我们可以看到这张图比较好玩

231
00:06:20,754 --> 00:06:22,474
rookieper它用英语翻译过来

232
00:06:22,474 --> 00:06:24,954
就是动物园管理员

233
00:06:25,034 --> 00:06:25,834
明白没有

234
00:06:26,154 --> 00:06:27,074
为什么这样去说

235
00:06:27,274 --> 00:06:27,954
是因为

236
00:06:28,234 --> 00:06:29,234
这个为什么

237
00:06:29,274 --> 00:06:30,514
因为在大数据

238
00:06:30,514 --> 00:06:31,794
Hadoop的商台里边

239
00:06:31,794 --> 00:06:32,914
好多框架

240
00:06:33,314 --> 00:06:36,354
它都以动物的logo

241
00:06:36,354 --> 00:06:37,994
就是以动物的头像

242
00:06:37,994 --> 00:06:39,634
来作为它一个技术的logo

243
00:06:39,634 --> 00:06:41,074
所以说我们这个rookieper

244
00:06:41,074 --> 00:06:41,834
你看大家注意

245
00:06:41,834 --> 00:06:42,354
rookieper

246
00:06:42,354 --> 00:06:43,434
我们说它是一个笔组

247
00:06:43,434 --> 00:06:43,914
它在干嘛

248
00:06:44,074 --> 00:06:45,954
它在高效的去管理每个服务

249
00:06:45,954 --> 00:06:46,434
接天

250
00:06:46,634 --> 00:06:48,754
它在高效的去管理每一个服务

251
00:06:48,754 --> 00:06:50,474
去做协调的工作

252
00:06:50,474 --> 00:06:52,234
所以说它就是起到一个

253
00:06:52,234 --> 00:06:53,714
不可或缺的一个位置了

254
00:06:53,954 --> 00:06:55,634
所以说这就是rookieper

255
00:06:55,954 --> 00:06:58,034
它叫动物园管理员

256
00:06:58,074 --> 00:07:00,074
所有的好多大数据的技术

257
00:07:00,114 --> 00:07:01,234
它都是以这种

258
00:07:01,554 --> 00:07:03,114
动物的图标

259
00:07:03,434 --> 00:07:03,954
去做的

260
00:07:03,954 --> 00:07:06,394
所以说rookieper你看就是一个

261
00:07:06,994 --> 00:07:08,434
管理员的一个形象了

262
00:07:08,434 --> 00:07:09,034
OK

263
00:07:09,474 --> 00:07:10,634
这节课我们介绍一下

264
00:07:10,874 --> 00:07:11,394
rookieper

265
00:07:11,554 --> 00:07:12,434
什么是rookieper

266
00:07:12,434 --> 00:07:13,914
到这我们就结束了

267
00:07:13,954 --> 00:07:14,554
结束之前

268
00:07:14,554 --> 00:07:16,286
我们再做两个练习题

269
00:07:16,286 --> 00:07:17,402
< No Speech >

270
00:07:17,402 --> 00:07:21,622
这个Rookiebird它是一个开放原代版的什么的分布是什么服务

271
00:07:22,298 --> 00:07:24,298
协调服 是不是

272
00:07:24,298 --> 00:07:25,690
< No Speech >

273
00:07:25,690 --> 00:07:29,050
所以说第一题我们应该选择的是D

274
00:07:29,050 --> 00:07:30,250
我们接着第二题

275
00:07:30,250 --> 00:07:33,650
Roger是一个经典的分布式的什么解决方案

276
00:07:34,586 --> 00:07:36,186
可用箱子解决方案吗

277
00:07:37,114 --> 00:07:38,674
可靠性的解决方案吗

278
00:07:38,674 --> 00:07:39,474
也不是

279
00:07:39,474 --> 00:07:41,314
数据的一致性没问题

280
00:07:41,314 --> 00:07:41,474
啊

281
00:07:41,474 --> 00:07:42,194
比如说RuKeyboard

282
00:07:42,194 --> 00:07:44,674
他主要解决就是数据的一致性的一个问题啊

283
00:07:44,674 --> 00:07:45,074
所以说呢

284
00:07:45,074 --> 00:07:46,954
这道题啊应该选择的是C

285
00:07:46,954 --> 00:07:47,754
好了

286
00:07:47,754 --> 00:07:49,674
这节课呢我们认识了一下RuKeyboard

287
00:07:49,674 --> 00:07:50,754
了解了一下RuKeyboard

288
00:07:50,754 --> 00:07:53,914
他在分布式的架构中解决了哪些问题

289
00:07:53,914 --> 00:07:55,754
到这呢就结束了

290
00:07:55,754 --> 00:07:56,594
谢谢大家

