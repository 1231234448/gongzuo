1
00:00:00,314 --> 00:00:01,814
Hello 小伙伴大家好

2
00:00:01,814 --> 00:00:05,114
这节课我们来学习ZooKeeper的一个应用成绩

3
00:00:05,114 --> 00:00:11,314
那ZooKeeper它是一个典型的发布订阅模式的分布式数据管理和协调框架

4
00:00:11,314 --> 00:00:12,814
好长呀 是不是

5
00:00:12,814 --> 00:00:15,014
那ZooKeeper一句话给大家说清楚

6
00:00:15,014 --> 00:00:16,514
那到底什么是ZooKeeper

7
00:00:16,514 --> 00:00:20,914
ZooKeeper它等于文件系统加监听机制

8
00:00:20,914 --> 00:00:24,510
大家可以根据ZooKeeper的发布订阅的这个功能

9
00:00:24,510 --> 00:00:25,786
可以实现出

10
00:00:25,786 --> 00:00:29,346
分布式数据发布订阅的一个功能的一个应用

11
00:00:29,346 --> 00:00:31,106
另一方面我们还可以通过

12
00:00:31,106 --> 00:00:33,146
ZooKeeper它的一个什么呢

13
00:00:33,146 --> 00:00:37,026
非常丰富的数据节点和这个事件通知机制

14
00:00:37,026 --> 00:00:40,830
我们可以实现出一套分布式的应用的一些核心功能

15
00:00:40,830 --> 00:00:42,010
比如说这个

16
00:00:42,010 --> 00:00:45,010
数据发布和订阅的一个功能

17
00:00:45,010 --> 00:00:46,010
这个功能呢

18
00:00:46,010 --> 00:00:48,010
在我们整个分布式的应用场景中

19
00:00:48,010 --> 00:00:49,010
非常常见

20
00:00:49,010 --> 00:00:51,010
就是去做配置中心

21
00:00:51,010 --> 00:00:54,010
那我们为什么需要这样的一个配置中心呢

22
00:00:54,010 --> 00:00:55,010
我们打一个比方

23
00:00:55,010 --> 00:00:57,278
比如说我们有几个应用

24
00:00:57,278 --> 00:01:00,506
应用A，应用b和应用c，这几个应用呢

25
00:01:00,506 --> 00:01:04,666
假如说他们把MySQL的数据库的连接的配置

26
00:01:04,666 --> 00:01:06,786
都写死在自己的应用里边

27
00:01:06,786 --> 00:01:09,278
他们都连接的是这个数据库

28
00:01:09,914 --> 00:01:12,670
192.168.66.99

29
00:01:12,670 --> 00:01:13,850


30
00:01:13,850 --> 00:01:15,410
这个数据库上

31
00:01:15,410 --> 00:01:16,570
当我们有一个需求

32
00:01:16,570 --> 00:01:18,850
说这个数据库它当机了

33
00:01:18,850 --> 00:01:22,850
我们需要马上把这个应用都切换到这个数据库中

34
00:01:22,850 --> 00:01:24,290
那小伙伴怎么去做

35
00:01:24,290 --> 00:01:26,330
那你是不是只能把这个应用啊

36
00:01:26,330 --> 00:01:27,230
这每一个应用

37
00:01:27,930 --> 00:01:29,250
服务停掉

38
00:01:29,250 --> 00:01:31,050
然后找到它的原代码

39
00:01:31,050 --> 00:01:33,050
然后改掉数据库的连接的

40
00:01:33,050 --> 00:01:34,410
IP地址的位置

41
00:01:34,410 --> 00:01:36,094
然后重新编译代码

42
00:01:36,094 --> 00:01:38,042


43
00:01:38,042 --> 00:01:39,642
太麻烦了 怎么办呢

44
00:01:39,642 --> 00:01:41,202
那我能不能有一种方式

45
00:01:41,202 --> 00:01:42,442
就是把这个配置呢

46
00:01:42,442 --> 00:01:45,534
公共的写在这个myc code的一个什么呢

47
00:01:46,394 --> 00:01:49,694
那也说当我们的应用A应用B和应用C

48
00:01:49,694 --> 00:01:52,094
他们在启动的时候呢都去买

49
00:01:52,094 --> 00:01:55,294
都去这个Rookkeeper的这个服务中去找一个叫做

50
00:01:55,294 --> 00:01:57,794
MysqlDB的这个节点的一个数据

51
00:01:57,794 --> 00:01:59,494
里边呢保存了一个什么呢

52
00:01:59,494 --> 00:02:00,394
IP地址

53
00:02:00,394 --> 00:02:03,494
那所以说呢这个应用呢它都连到了这个数据库中

54
00:02:03,494 --> 00:02:05,594
啊就是说它的配置呢是写死在这个

55
00:02:05,594 --> 00:02:08,094
写死在这个Rookkeeper里边呢

56
00:02:08,094 --> 00:02:11,594
那说当我们的这个数据库它要切换的时候怎么办呢

57
00:02:11,594 --> 00:02:13,294
我们需要把这个应用里面改一下吗

58
00:02:13,294 --> 00:02:13,694
不用

59
00:02:13,694 --> 00:02:16,594
我们只需要把Rookkeeper的这个位置这个数据

60
00:02:16,594 --> 00:02:18,394
我们只要一改就可以了

61
00:02:18,394 --> 00:02:19,694
这就是什么呢

62
00:02:19,694 --> 00:02:21,494
第一个功能的实践

63
00:02:21,494 --> 00:02:24,094
就是数据的发布和订阅

64
00:02:24,094 --> 00:02:25,394
在这个数据发布订阅中

65
00:02:25,394 --> 00:02:26,394
Rookkeeper它有什么呢

66
00:02:26,394 --> 00:02:29,494
它采用的是这种推拉结合的这种方式

67
00:02:29,494 --> 00:02:31,494
那什么叫推拉呢

68
00:02:31,494 --> 00:02:33,394
就是我们Rookkeeper的服务

69
00:02:33,394 --> 00:02:36,094
它也可以主动给这个应用推消息

70
00:02:36,094 --> 00:02:38,494
那应用呢也可以在它启动的时候呢

71
00:02:38,494 --> 00:02:40,794
主动问服务器要数据

72
00:02:40,794 --> 00:02:43,094
那也说假如说我们这个应用A

73
00:02:43,094 --> 00:02:44,294
应用B和应用C

74
00:02:44,294 --> 00:02:45,394
他们在启动的时候呢

75
00:02:45,394 --> 00:02:46,294
启动的时候呢

76
00:02:46,294 --> 00:02:49,794
都会问Rookkeeper的这个服务拉取这个数据

77
00:02:49,794 --> 00:02:50,594
没问题吧

78
00:02:50,594 --> 00:02:53,494
那当这个数据发生改变的时候

79
00:02:53,494 --> 00:02:54,694
哎改变了这个数据

80
00:02:54,694 --> 00:02:55,694
那随着这个时候啊

81
00:02:55,694 --> 00:02:58,294
你的Rookkeeper要主动的推消息

82
00:02:58,294 --> 00:02:59,294
推给这个应用

83
00:02:59,294 --> 00:03:02,794
这个时候我们就可以通过使用Rookkeeper这个技术呢

84
00:03:02,794 --> 00:03:06,194
达到一种动态获取数据的一个目的

85
00:03:06,194 --> 00:03:08,594
动态变更配置文件的一个目的

86
00:03:08,594 --> 00:03:11,194
所以说Rookkeeper它是必不可少的

87
00:03:11,194 --> 00:03:12,994
我们来看具体该怎么去做

88
00:03:12,994 --> 00:03:15,494
假如说我们有这样的一个配置文件

89
00:03:15,494 --> 00:03:19,694
比如说里边保存的是我们的一个这个叫什么呀

90
00:03:19,694 --> 00:03:21,394
Driver一个Driver

91
00:03:21,394 --> 00:03:21,794
然后呢

92
00:03:21,794 --> 00:03:24,294
还有一个是我们这个数据库连接的一个UIL

93
00:03:24,294 --> 00:03:25,294
还有个用名和密码

94
00:03:25,294 --> 00:03:26,594
这就是我们的配置信息啊

95
00:03:26,594 --> 00:03:27,594
我们把这个配置信息呢

96
00:03:27,594 --> 00:03:29,394
我们写到这个Rookkeeper里边

97
00:03:29,394 --> 00:03:30,794
当我们这个应用启动的时候呢

98
00:03:30,794 --> 00:03:33,594
它就会把这个配置拉到它自己的项目里边

99
00:03:33,594 --> 00:03:34,294
进行什么呢

100
00:03:34,294 --> 00:03:35,794
连接这个数据库啊

101
00:03:35,794 --> 00:03:37,694
连接这个数据库OK

102
00:03:37,694 --> 00:03:38,294
然后呢

103
00:03:38,294 --> 00:03:41,294
就是当我们这个需要切换需要修改的时候呢

104
00:03:41,294 --> 00:03:43,594
我们只需要把这个Rookkeeper里边这个节点的这个数据

105
00:03:43,594 --> 00:03:44,394
这个配置文件

106
00:03:44,394 --> 00:03:45,394
我们只要一改

107
00:03:45,394 --> 00:03:45,994
然后呢

108
00:03:45,994 --> 00:03:49,694
这个Rookkeeper会主动把这个修改的这个配置推送给这个应用

109
00:03:49,694 --> 00:03:54,094
所以说这个功能我们就需要通过Rookkeeper这个技术来实现了

110
00:03:54,094 --> 00:03:54,694
那第二个呢

111
00:03:54,694 --> 00:03:57,694
就是负载均衡的这个技术

112
00:03:57,694 --> 00:03:58,894
这个负载均衡啊

113
00:03:58,894 --> 00:04:01,594
它是一个非常常见的一个技术了

114
00:04:01,594 --> 00:04:04,394
非常常见的一个计算机网络的一个技术

115
00:04:04,394 --> 00:04:07,394
我们在之前讲解Nzeggs的时候我们也讲过啊

116
00:04:07,394 --> 00:04:10,794
它里边也有负载均衡和反向带领的一个技术

117
00:04:10,794 --> 00:04:11,294
但是呢

118
00:04:11,294 --> 00:04:13,694
针对于多台机器啊

119
00:04:13,694 --> 00:04:15,994
多台机器就是计算机集群来说啊

120
00:04:15,994 --> 00:04:17,994
网络连接CPU磁盘驱动

121
00:04:17,994 --> 00:04:18,894
这就是什么呢

122
00:04:18,894 --> 00:04:25,694
资源是不是我们要通过负载均衡的技术达到我们的资源利用率的最大化啊

123
00:04:25,694 --> 00:04:28,094
也就是我们最大的一个吞吐量啊

124
00:04:28,094 --> 00:04:31,454
以及最小的写上时间以及避免什么呢

125
00:04:31,454 --> 00:04:32,594
过载的一个目的

126
00:04:32,594 --> 00:04:33,094
所以说呢

127
00:04:33,094 --> 00:04:37,594
这个我们通常可以使用这种负载均衡这个技术来去做

128
00:04:37,594 --> 00:04:38,354
但是呢

129
00:04:38,354 --> 00:04:39,314
这个负载均衡啊

130
00:04:39,314 --> 00:04:42,194
这个技术呢它有分为硬件和软件

131
00:04:42,194 --> 00:04:44,554
那我们当前的使用Rookable去做的话

132
00:04:44,554 --> 00:04:46,474
肯定就是软件方面是吧

133
00:04:46,474 --> 00:04:47,194
那硬件呢

134
00:04:47,194 --> 00:04:50,754
需要让小伙伴呢自行去买一个叫做F5的一个硬件设备

135
00:04:50,754 --> 00:04:52,154
大概三十多万是吧

136
00:04:52,154 --> 00:04:52,754
太贵了

137
00:04:52,754 --> 00:04:53,354
那这个时候呢

138
00:04:53,354 --> 00:04:58,594
我们可以通过Rookable软件的这种方式去实现这个负载均衡

139
00:04:58,594 --> 00:05:00,034
在分布式系统里边呢

140
00:05:00,034 --> 00:05:03,194
这个负载均衡呢更是一个普遍的一个技术了

141
00:05:03,194 --> 00:05:09,234
就是我们在每一个分布式系统里边都需要使用这个负载均衡的这个技术

142
00:05:09,234 --> 00:05:11,114
所以说呢特别的重要

143
00:05:11,114 --> 00:05:12,154
那为什么呢

144
00:05:12,154 --> 00:05:12,354
呃

145
00:05:12,354 --> 00:05:13,474
我们呢之前都说了

146
00:05:13,474 --> 00:05:18,074
那我们的分布式架构呢是把一个应用整体的应用拆成了好多个小份

147
00:05:18,074 --> 00:05:20,954
是不是那每一个小份就是一个服务

148
00:05:20,954 --> 00:05:23,074
问大家那假如说有一个用户服务

149
00:05:23,074 --> 00:05:24,714
他支撑不住怎么办呀

150
00:05:24,714 --> 00:05:26,754
那你是不是得来个四五个用户服务

151
00:05:26,754 --> 00:05:29,034
是不是那四五个用户服务提供出来

152
00:05:29,034 --> 00:05:33,994
我们需要对这四五个用户服务实现一种负载均衡的技术吧

153
00:05:33,994 --> 00:05:34,794
我们怎么去做

154
00:05:34,794 --> 00:05:36,554
我们可以这样在Rookable里边

155
00:05:36,554 --> 00:05:37,514
我们创建一个节点

156
00:05:37,514 --> 00:05:38,274
在这个节点里边呢

157
00:05:38,274 --> 00:05:40,034
我们再创建一个服务的节点

158
00:05:40,034 --> 00:05:41,034
在这个服务的节点里边

159
00:05:41,034 --> 00:05:42,994
比如说我们用户一用户二用户三

160
00:05:42,994 --> 00:05:46,634
你看用户服务用户服务用户服务有三个服务在提供支持

161
00:05:46,634 --> 00:05:47,154
是不是啊

162
00:05:47,154 --> 00:05:50,674
这就是我们用户服务的集群整体的分布式嘛

163
00:05:50,674 --> 00:05:52,154
那我们所有的客户端呢

164
00:05:52,154 --> 00:05:54,474
他就可以通过负载均衡的技术

165
00:05:54,474 --> 00:05:56,034
从比如说我要请求用户服务

166
00:05:56,034 --> 00:05:56,434
好嘞

167
00:05:56,434 --> 00:05:59,514
这三台里边找一个这就叫负载均衡技术了啊

168
00:05:59,514 --> 00:06:01,834
我们也可以通过Rookable来进行实现

169
00:06:01,834 --> 00:06:01,994
嗯

170
00:06:01,994 --> 00:06:02,394
还有呢

171
00:06:02,394 --> 00:06:03,794
我们也可以通过Rookable呢

172
00:06:03,794 --> 00:06:06,430
来实现一个叫做命名服务

173
00:06:07,034 --> 00:06:10,874
这个命名服务也比较好玩

174
00:06:11,434 --> 00:06:13,674
首先我们可以通过命名服务来实现

175
00:06:13,674 --> 00:06:15,274
第一个就是我们可以干嘛

176
00:06:15,434 --> 00:06:17,234
在乳Kber里边去保存我们服务的

177
00:06:17,234 --> 00:06:19,514
名称地址以及目录信息

178
00:06:19,514 --> 00:06:21,874
我们之前一直在说什么是乳Kber

179
00:06:22,194 --> 00:06:25,234
乳Kber它是文件系统加监听机制

180
00:06:25,234 --> 00:06:25,674
是不是

181
00:06:25,674 --> 00:06:27,714
随着命名服务

182
00:06:27,834 --> 00:06:30,674
它也是在我们分布式的系统中

183
00:06:30,714 --> 00:06:33,754
非常比较常见的一种成绩了

184
00:06:33,754 --> 00:06:37,914
也是做我们分布式系统里边

185
00:06:37,914 --> 00:06:39,754
最重要的一个公共服务

186
00:06:40,034 --> 00:06:41,994
就是去提供名字的

187
00:06:41,994 --> 00:06:45,954
那就像比如说你看我们把一个分单机架构

188
00:06:45,954 --> 00:06:47,154
一个大的架构

189
00:06:47,154 --> 00:06:49,394
拆成了好多个小的服务

190
00:06:49,594 --> 00:06:50,434
每一个服务

191
00:06:51,194 --> 00:06:53,114
你总得比如说你用户服务

192
00:06:53,114 --> 00:06:54,034
要去调订单服务

193
00:06:54,034 --> 00:06:55,634
你就总得能找到订单服务

194
00:06:55,874 --> 00:06:56,354
是吧

195
00:06:56,354 --> 00:06:58,274
你总得能找到支付服务

196
00:06:58,594 --> 00:07:00,634
你总得能找到地址服务

197
00:07:00,994 --> 00:07:01,474
是不是

198
00:07:01,474 --> 00:07:03,354
所以说我们需要把所有的服务的

199
00:07:03,354 --> 00:07:04,634
什么名称

200
00:07:04,754 --> 00:07:05,634
地址

201
00:07:05,634 --> 00:07:06,554
录入信息

202
00:07:06,554 --> 00:07:08,434
都存放在入Kper里边

203
00:07:08,434 --> 00:07:10,194
以便我们后续的时候去使用

204
00:07:10,194 --> 00:07:11,114
这就是提供的什么

205
00:07:11,394 --> 00:07:12,514
名字的服务

206
00:07:12,514 --> 00:07:12,954
当然了

207
00:07:12,954 --> 00:07:15,994
我们还可以提供它一种叫分布式的

208
00:07:15,994 --> 00:07:17,874
一个序列号的生成器

209
00:07:17,994 --> 00:07:19,434
因为我们之前是单机的

210
00:07:19,434 --> 00:07:22,114
我们通过mySQL的一个ID自动增长

211
00:07:22,114 --> 00:07:22,674
没有问题

212
00:07:22,674 --> 00:07:24,354
但是如果说变成分布式的

213
00:07:24,354 --> 00:07:25,394
肯定会出现问题

214
00:07:25,394 --> 00:07:27,834
我们就可以通过命名服务

215
00:07:28,074 --> 00:07:28,754
来提供什么的

216
00:07:28,754 --> 00:07:31,234
统一的ID自动增长

217
00:07:31,434 --> 00:07:32,834
这就是命名服务

218
00:07:32,834 --> 00:07:33,394
OK

219
00:07:33,914 --> 00:07:34,874
第4个

220
00:07:35,114 --> 00:07:36,834
我们还可以通过入Kper去实现一个

221
00:07:36,834 --> 00:07:40,594
叫做分布式协调通知

222
00:07:40,954 --> 00:07:42,794
这个分布式协调通知的服务

223
00:07:43,114 --> 00:07:45,834
它在我们整个分布式系统中

224
00:07:45,834 --> 00:07:47,674
都是非常重要的一个环节

225
00:07:47,674 --> 00:07:50,354
就是我们将不同的分布式组件

226
00:07:50,554 --> 00:07:51,754
有机的结合的一个什么

227
00:07:51,754 --> 00:07:52,674
关键所在

228
00:07:52,674 --> 00:07:54,674
就是我们在很多台机器里边

229
00:07:54,674 --> 00:07:55,714
我们需要一个什么

230
00:07:56,114 --> 00:07:57,274
协调制

231
00:07:57,274 --> 00:07:58,794
相当于是工地里边

232
00:07:58,794 --> 00:07:59,834
我们需要一个包工头

233
00:07:59,834 --> 00:08:01,274
来传递一些信息

234
00:08:01,274 --> 00:08:02,674
来控制整个

235
00:08:02,674 --> 00:08:04,114
我们系统的一个运营流程

236
00:08:04,114 --> 00:08:05,594
比如说你去搬砖

237
00:08:05,594 --> 00:08:06,714
你去和水泥

238
00:08:06,714 --> 00:08:07,434
你去干嘛

239
00:08:07,434 --> 00:08:08,674
所以说我们需要一个什么

240
00:08:08,674 --> 00:08:10,554
协调者的一个操作

241
00:08:10,754 --> 00:08:12,034
协调者的一个操作

242
00:08:12,634 --> 00:08:17,114
比如说我们拿Mysql的一个数据复制

243
00:08:17,114 --> 00:08:20,514
总线的模型来说

244
00:08:20,874 --> 00:08:22,714
Mysql的复制总线

245
00:08:22,954 --> 00:08:26,794
它其实是一个实时的数据复制的空间

246
00:08:26,794 --> 00:08:28,314
因为我们Mysql数据库

247
00:08:28,314 --> 00:08:29,434
不可能只有一台是吧

248
00:08:29,594 --> 00:08:30,874
如果说你只有一台的话

249
00:08:30,874 --> 00:08:32,194
肯定会出现什么问题

250
00:08:32,194 --> 00:08:33,914
单点故障问题是不是

251
00:08:33,914 --> 00:08:35,554
所以这张图就是一个什么

252
00:08:35,874 --> 00:08:38,754
Mysql数据复制总线模型的一张图

253
00:08:39,034 --> 00:08:42,154
它在于我们不同的数据库

254
00:08:42,154 --> 00:08:43,194
之间来进行什么

255
00:08:43,394 --> 00:08:46,754
异步的进行数据复制和什么

256
00:08:47,074 --> 00:08:49,794
数据变化控制

257
00:08:50,034 --> 00:08:50,594
整个系统

258
00:08:50,714 --> 00:08:51,714
我们可以通过一个什么

259
00:08:52,554 --> 00:08:53,754
这个叫Mysql的集群

260
00:08:53,754 --> 00:08:55,234
以及消息堆猎去做

261
00:08:55,234 --> 00:08:57,594
但是在我们任务监控

262
00:08:57,594 --> 00:09:00,354
以及我们Rookieper的集群里边

263
00:09:00,354 --> 00:09:01,114
我们产生一个什么

264
00:09:01,114 --> 00:09:03,754
我们又多了一个叫做消息的商谈者

265
00:09:03,754 --> 00:09:06,114
以及我们消息的一个消费者

266
00:09:06,114 --> 00:09:08,394
还有一个叫复制组件

267
00:09:08,634 --> 00:09:09,354
复制组件

268
00:09:09,354 --> 00:09:10,434
以及我们消息的

269
00:09:10,434 --> 00:09:11,634
还有消息的一个消费者

270
00:09:11,634 --> 00:09:12,114
是不是

271
00:09:12,114 --> 00:09:14,634
构成了我们整个Mysql复制总线的

272
00:09:14,634 --> 00:09:15,794
一个什么模型图

273
00:09:15,954 --> 00:09:17,354
当然在这个图里边

274
00:09:17,354 --> 00:09:18,114
我们可以看到

275
00:09:18,114 --> 00:09:19,274
在该系统中

276
00:09:19,274 --> 00:09:20,674
我们Rookieper

277
00:09:20,674 --> 00:09:22,154
它主要是干嘛

278
00:09:22,474 --> 00:09:25,634
负责一系列的分布式协调工作

279
00:09:25,674 --> 00:09:26,794
你有数据了没有

280
00:09:26,794 --> 00:09:27,474
有数据了是吧

281
00:09:27,474 --> 00:09:27,674
来

282
00:09:27,674 --> 00:09:29,994
我同步给我们这边所需要的数据库

283
00:09:29,994 --> 00:09:30,954
你有数据了没有

284
00:09:30,954 --> 00:09:31,474
有来

285
00:09:31,474 --> 00:09:32,514
我同步给这边

286
00:09:32,674 --> 00:09:34,114
如果说你有没有数据变化

287
00:09:34,114 --> 00:09:35,474
有来同步给这边

288
00:09:35,474 --> 00:09:35,954
OK

289
00:09:35,954 --> 00:09:37,034
所以说Rookieper

290
00:09:37,034 --> 00:09:38,474
它的中间做的是一个什么

291
00:09:38,474 --> 00:09:40,074
分布式协调的工作

292
00:09:40,074 --> 00:09:41,594
你把它可以把它理解为

293
00:09:41,594 --> 00:09:44,074
在工地上负责协调的那个人

294
00:09:44,074 --> 00:09:44,674
是吧

295
00:09:44,674 --> 00:09:45,554
你负责搬砖

296
00:09:45,554 --> 00:09:46,194
你负责喝水

297
00:09:46,194 --> 00:09:46,874
你有什么问题

298
00:09:46,914 --> 00:09:47,714
我给你去解决

299
00:09:47,714 --> 00:09:48,234
这就是什么

300
00:09:48,474 --> 00:09:50,354
协调者的一个工作职能

301
00:09:50,954 --> 00:09:52,674
根本上我们可以把它分为几个功能

302
00:09:52,674 --> 00:09:53,234
是不是

303
00:09:53,554 --> 00:09:54,954
商谈者产生消息

304
00:09:55,074 --> 00:09:56,434
消费者来些什么

305
00:09:56,434 --> 00:09:57,674
消费消息

306
00:09:58,034 --> 00:09:59,154
非常什么的

307
00:09:59,154 --> 00:09:59,994
非常的简单

308
00:09:59,994 --> 00:10:01,354
而且每一个模块

309
00:10:01,354 --> 00:10:02,114
他们都在什么

310
00:10:02,114 --> 00:10:04,474
单独的一个进程里边去运行

311
00:10:04,634 --> 00:10:06,114
所以说数据和状态

312
00:10:06,194 --> 00:10:07,874
我们都保存在Rookieper上

313
00:10:07,874 --> 00:10:08,754
来做一个什么

314
00:10:08,754 --> 00:10:09,874
统一的一个管理

315
00:10:09,994 --> 00:10:10,514
这就是什么

316
00:10:10,714 --> 00:10:12,634
分布式协调通知

317
00:10:12,794 --> 00:10:13,794
也是非常重要

318
00:10:13,794 --> 00:10:15,954
我们可以通过Rookieper来这样实现

319
00:10:15,954 --> 00:10:16,474
好了

320
00:10:16,634 --> 00:10:19,274
这节课我们讲解Rookieper的一个

321
00:10:19,314 --> 00:10:20,314
应用场景

322
00:10:20,554 --> 00:10:21,554
到这就结束了

323
00:10:21,554 --> 00:10:22,634
有的时候小伙伴老说

324
00:10:22,634 --> 00:10:23,514
老说你说这么多

325
00:10:23,514 --> 00:10:24,274
我听不懂

326
00:10:24,554 --> 00:10:25,474
没有关系

327
00:10:25,474 --> 00:10:27,194
你只要明白我们Rookieper

328
00:10:27,194 --> 00:10:29,074
它有这么多功能就OK了

329
00:10:29,074 --> 00:10:30,434
很牛逼很厉害

330
00:10:30,434 --> 00:10:31,994
并且你再记住一句话

331
00:10:31,994 --> 00:10:33,034
什么是Rookieper

332
00:10:33,034 --> 00:10:36,114
它是文件系统加监听机制

333
00:10:36,354 --> 00:10:38,194
你在后续的学习过程中

334
00:10:38,314 --> 00:10:39,514
你就要一直在看

335
00:10:39,554 --> 00:10:41,594
它到底文件系统是保存什么东西

336
00:10:41,594 --> 00:10:42,314
怎么保存的

337
00:10:42,314 --> 00:10:43,354
以及监听机制

338
00:10:43,354 --> 00:10:44,594
到底是怎么监听的

339
00:10:44,594 --> 00:10:46,674
能去实现哪些工作

340
00:10:46,714 --> 00:10:47,394
就OK了

341
00:10:47,394 --> 00:10:48,634
来我们这节课

342
00:10:48,754 --> 00:10:49,874
我们到这就结束了

343
00:10:49,874 --> 00:10:50,394
结束之前

344
00:10:50,514 --> 00:10:51,634
我们再做一个练习题

345
00:10:52,594 --> 00:10:53,554
在Rookieper中

346
00:10:53,554 --> 00:10:54,314
它是一个什么

347
00:10:54,674 --> 00:10:56,354
Rookieper它是一个经典的

348
00:10:56,354 --> 00:10:58,034
什么模式的分布式数据

349
00:10:58,034 --> 00:10:59,114
管理和协调框架

350
00:10:59,114 --> 00:11:00,154
什么模式

351
00:11:00,474 --> 00:11:01,514
第一协调模式

352
00:11:01,514 --> 00:11:02,114
对立模式

353
00:11:02,114 --> 00:11:03,154
数据管理模式

354
00:11:03,154 --> 00:11:05,394
以及发布订阅的模式

355
00:11:05,394 --> 00:11:06,954
肯定是发布订阅

356
00:11:06,954 --> 00:11:07,514
是不是

357
00:11:07,514 --> 00:11:08,674
所以说这节课

358
00:11:08,994 --> 00:11:09,754
比如说这道题

359
00:11:09,874 --> 00:11:11,354
我们应该选择的是D

360
00:11:11,394 --> 00:11:13,634
好了这节课我们就讲到这

361
00:11:13,634 --> 00:11:15,678
我们下节课再见

